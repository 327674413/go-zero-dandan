version: '3'
services:
  etcd:
    container_name: etcd3
    image: bitnami/etcd:3.5.7
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379 #监听本机所有网络的2379端口
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379,http://0.0.0.0:2379 #对外通告地址，允许多个，别名给apisix用，4个0给宿主机用
      - ETCD_NAME=etcd
    privileged: true
    volumes:
      - ${DATA_DIR}/etcd:/opt/bitnami/etcd/data
    ports:
      - 2379:2379
      - 2380:2380
    networks:
      dandan_net:
        ipv4_address: 172.20.0.2
  redis:
    container_name: redis
    image: redis:7.0
    ports:
      - 6379:6379
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    volumes:
      # 数据文件 - data files
      - ./docker/data/redis/data:/data:rw
    command: "redis-server --requirepass G62m50oigInC30sf  --appendonly yes"
    privileged: true
    restart: always
    networks:
      - dandan_net
  #zookeeper是kafka的依赖 - Zookeeper is the dependencies of Kafka
  zookeeper:
    container_name: zookeeper
    image: zookeeper:3.8.1
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    restart: always
    ports:
      - 2181:2181
    networks:
      - dandan_net
  prometheus:
    image: bitnami/prometheus:2.44.0
    container_name: prometheus
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    volumes:
      - ${CONF_DIR}/prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml
      - ${CONF_DIR}/prometheus/targets.json:/opt/bitnami/prometheus/conf/targets.json
    restart: always
    user: root
    ports:
      - 9090:9090
    networks:
      - dandan_net

  #查看prometheus监控数据 - Grafana to view Prometheus monitoring data
  #启动后http://127.0.0.1:3001/ 进入，默认账号密码都是admin
  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    hostname: grafana
    user: root
    environment:
    # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    restart: always
    volumes:
      - ./docker/data/grafana/data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - dandan_net
  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:1.46.0
    environment:
      - TZ=Asia/Shanghai
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - LOG_LEVEL=debug
    privileged: true
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    restart: always
    networks:
      - dandan_net
  elasticsearch:
    container_name: elasticsearch
    #image: elasticsearch:8.8.0 #这个版本跟jaeger没配成功
    image: elasticsearch:7.13.1 #如果起不来，报错权限问题，需要手动对挂载目录给权限，比如 chmod 777 ./docker/data/elasticsearch/data
    user: root
    volumes:
      #- ./docker/conf/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./docker/data/elasticsearch/data:/usr/share/elasticsearch/data
    environment:
      - TZ=Asia/Shanghai
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      #以下配置是8.x版本用的，但是jaeger连不上，放弃用7了
      #- node.name=es
      #- cluster.name=elasticsearch
      #- bootstrap.memory_lock=true
      #- xpack.security.enabled=false
      #- xpack.security.http.ssl.enabled=false
      #- xpack.security.transport.ssl.enabled=false
    privileged: true
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: always
    networks:
      - dandan_net
  filebeat:
    image: elastic/filebeat:8.8.0
    container_name: filebeat
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    user: root
    restart: always
    entrypoint: "filebeat -e -strict.perms=false"  #解决配置文件权限问题 - Solving the configuration file permissions
    volumes:
      - ./docker/conf/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      # 此处需指定docker的containers目录，取决于你docker的配置 - The containers directory of docker needs to be specified here, depending on your docker configuration
      # 如snap安装的docker，则为/var/snap/docker/common/var-lib-docker/containers - Example if docker is installed by Snap /var/snap/docker/common/var-lib-docker/containers
      # - /var/snap/docker/common/var-lib-docker/containers:/var/lib/docker/containers
      - /var/lib/docker/containers:/var/lib/docker/containers
      #- /Users/yelin/go_dev/project/src/go-zero-dandan/docker/data:/var/lib/docker/containers
    networks:
      - dandan_net
    depends_on:
      - kafka
  #消费kafka中filebeat收集的数据输出到es - The data output collected by FileBeat in Kafka is output to ES
  #不能加user: root，不然反而会有提示
  go-stash:
    #image: kevinwan/go-stash:1.0.8 #linxu amd用
    image: kevinwan/go-stash:1.0.8-arm64 #mac arm 用
    container_name: go-stash
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    restart: always
    volumes:
      - ./docker/conf/go-stash:/app/etc
    networks:
      - dandan_net
    depends_on:
      - elasticsearch
      - kafka
  kibana:
    #image: kibana:8.8.0
    image: kibana:7.13.1
    container_name: kibana
    environment:
      - elasticsearch.hosts=http://elasticsearch:9200
      - TZ=Asia/Shanghai
    restart: always
    networks:
      - dandan_net
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
  #消息队列 - Message queue
  kafka:
    container_name: kafka
    image: bitnami/kafka:3.5.1
    ports:
      - 9092:9092
    environment:
      - TZ=Asia/Shanghai
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@<your_host>:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      #- KAFKA_CFG_ADVERTISED_LISTENERS=INSIDE://127.0.0.1:9092 #有个教程说用宿主机ip，但没试过是否能解决要加别名的问题
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://kafka:9094 #需要在etc/hosts里加上kafka 容器id这个别名
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    restart: always
    user: root
    volumes:
      - ./docker/data/kafka:/bitnami/kafka
    networks:
      - dandan_net
  #分布式文件存储
  minio:
    container_name: minio
    image: minio/minio:RELEASE.2023-06-29T05-12-28Z
    volumes:
      - ./docker/data/minio:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=root
      - MINIO_ROOT_PASSWORD=12345678 #至少8个字符
    command: server /data --console-address ":9001"
    networks:
      - dandan_net
    restart: always
  canal:
    image: canal/canal-server:v1.1.7
    container_name: canal
    ports:
      - 11111:11111 #canal默认端口号，一般不用改，除非端口冲突
    volumes:
      - ./docker/conf/canal/canal.properties:/home/admin/canal-server/conf/canal.properties
      - ./docker/conf/canal/instance.properties:/home/admin/canal-server/conf/example/instance.properties
      - ./docker/data/canal/logs:/home/admin/canal-server/logs
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
    networks:
      - dandan_net
  mysql:
    image: mysql:8.1
    container_name: mysql
    environment:
      TZ: Asia/Shanghai
      MYSQL_ROOT_PASSWORD: 8a7yNLrsThjw3jra # root 密码 - root password
    ports:
      - 3306:3306
    volumes:
      # 数据挂载 - Data mounting
      - ./docker/conf/mysql/my.cnf:/etc/my.cnf
      - ./docker/data/mysql/data:/var/lib/mysql
      # 日志
    command:
      # 将mysql8.0默认密码策略 修改为 原先 策略 (mysql8.0对其默认策略做了更改 会导致密码无法匹配)
      # Modify the Mysql 8.0 default password strategy to the original strategy (MySQL8.0 to change its default strategy will cause the password to be unable to match)
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
    privileged: true
    restart: always
    networks:
      - dandan_net
  mongo:
    image: mongo:4.2.1
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 8a7yNLrsThjw3jra
    ports:
      - 27017:27017
    volumes:
      - ./docker/data/mongo/data:/data/db
      - ./docker/data/mongo/logs:/var/log/mongodb  # 挂载日志目录
    restart: always
    privileged: true
    networks:
      - dandan_net
  apisix-dashboard:
    image: apache/apisix-dashboard:3.0.1-alpine
    container_name: apisix-dashboard
    restart: always
    depends_on:
      - etcd
    volumes:
      - ./docker/conf/apisix-dashboard/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml
    ports:
      - "9002:9000" # minio用了9000和9001
    networks:
      - dandan_net
  apisix:
    image: apache/apisix:3.2.0-debian
    container_name: apisix
    restart: always
    depends_on:
      - etcd
      - apisix-dashboard
    volumes:
      - ./docker/conf/apisix/config.yaml:/usr/local/apisix/conf/config.yaml
      - ./docker/data/apisix/logs:/usr/local/apisix/logs
    ports:
      - "9180:9180/tcp"
      - "9080:9080/tcp"
      - "9091:9091/tcp"
      - "9443:9443/tcp"
      - "9093:9092/tcp"
    networks:
      - dandan_net
  sail:
    image: ccr.ccs.tencentyun.com/hyy-yu/sail:latest
    container_name: sail
    ports:
      - "8108:8108"
    volumes:
      - "./docker/conf/sail/compose-cfg.toml:/app/cfg.toml"
    restart: always
    platform: linux/arm64
    networks:
      - dandan_net
networks:
  dandan_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1