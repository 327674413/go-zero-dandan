// Code generated by goctl. DO NOT EDIT.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: plat.proto

package platRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Plat_GetOne_FullMethodName = "/plat.plat/GetOne"
)

// PlatClient is the client API for Plat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlatClient interface {
	GetOne(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*PlatInfo, error)
}

type platClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatClient(cc grpc.ClientConnInterface) PlatClient {
	return &platClient{cc}
}

func (c *platClient) GetOne(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*PlatInfo, error) {
	out := new(PlatInfo)
	err := c.cc.Invoke(ctx, Plat_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatServer is the server API for Plat service.
// All implementations must embed UnimplementedPlatServer
// for forward compatibility
type PlatServer interface {
	GetOne(context.Context, *IdReq) (*PlatInfo, error)
	mustEmbedUnimplementedPlatServer()
}

// UnimplementedPlatServer must be embedded to have forward compatible implementations.
type UnimplementedPlatServer struct {
}

func (UnimplementedPlatServer) GetOne(context.Context, *IdReq) (*PlatInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedPlatServer) mustEmbedUnimplementedPlatServer() {}

// UnsafePlatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlatServer will
// result in compilation errors.
type UnsafePlatServer interface {
	mustEmbedUnimplementedPlatServer()
}

func RegisterPlatServer(s grpc.ServiceRegistrar, srv PlatServer) {
	s.RegisterService(&Plat_ServiceDesc, srv)
}

func _Plat_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plat_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatServer).GetOne(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Plat_ServiceDesc is the grpc.ServiceDesc for Plat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plat.plat",
	HandlerType: (*PlatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _Plat_GetOne_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plat.proto",
}
