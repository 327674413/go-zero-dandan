// Code generated by goctl. DO NOT EDIT.
package logic

import (
	"context"

	"go-zero-dandan/app/plat/api/internal/svc"
	"go-zero-dandan/app/plat/api/internal/types"

	"github.com/zeromicro/go-zero/core/logx"
	"go-zero-dandan/common/resd"
	"go-zero-dandan/common/typed"
	"strings"
)

type GetTokenLogicGen struct {
	logx.Logger
	ctx          context.Context
	svc          *svc.ServiceContext
	resd         *resd.Resp
	meta         *typed.ReqMeta
	hasUserInfo  bool
	mustUserInfo bool
	req          struct {
		Appid  string `json:"appid"`
		Secret string `json:"secret"`
	}
	hasReq struct {
		Appid  bool
		Secret bool
	}
}

func NewGetTokenLogicGen(ctx context.Context, svc *svc.ServiceContext) *GetTokenLogicGen {
	meta, _ := ctx.Value("reqMeta").(*typed.ReqMeta)
	if meta == nil {
		meta = &typed.ReqMeta{}
	}
	return &GetTokenLogicGen{
		Logger: logx.WithContext(ctx),
		ctx:    ctx,
		svc:    svc,
		resd:   resd.NewResp(ctx, meta.Lang),
		meta:   meta,
	}
}

func (l *GetTokenLogicGen) initReq(req *types.GetTokenReq) error {

	if req.Appid != nil {
		l.req.Appid = strings.TrimSpace(*req.Appid)
		l.hasReq.Appid = true
	} else {
		l.hasReq.Appid = false
	}

	if l.hasReq.Appid == false {
		return resd.NewErrWithTempCtx(l.ctx, "缺少参数Appid", resd.ErrReqFieldRequired1, "Appid")
	}

	if l.req.Appid == "" {
		return resd.NewErrWithTempCtx(l.ctx, "Appid不得为空", resd.ErrReqFieldEmpty1, "Appid")
	}

	if req.Secret != nil {
		l.req.Secret = strings.TrimSpace(*req.Secret)
		l.hasReq.Secret = true
	} else {
		l.hasReq.Secret = false
	}

	if l.hasReq.Secret == false {
		return resd.NewErrWithTempCtx(l.ctx, "缺少参数Secret", resd.ErrReqFieldRequired1, "Secret")
	}

	if l.req.Secret == "" {
		return resd.NewErrWithTempCtx(l.ctx, "Secret不得为空", resd.ErrReqFieldEmpty1, "Secret")
	}

	return nil
}
