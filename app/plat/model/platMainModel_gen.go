// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	platMainFieldNames          = builder.RawFieldNames(&PlatMain{})
	platMainRows                = strings.Join(platMainFieldNames, ",")
	platMainRowsExpectAutoSet   = strings.Join(stringx.Remove(platMainFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	platMainRowsWithPlaceHolder = strings.Join(stringx.Remove(platMainFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	platMainModel interface {
		Insert(ctx context.Context, data *PlatMain) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PlatMain, error)
		Update(ctx context.Context, data *PlatMain) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPlatMainModel struct {
		conn            sqlx.SqlConn
		table           string
		softDeleteField string
		softDeleteState bool
		fieldSql        string
		whereSql        string
		aliasSql        string
		orderSql        string
		whereData       []any
		err             error
	}

	PlatMain struct {
		Id       int64  `db:"id"`
		Appid    string `db:"appid"`     // 对外应用标识
		Secret   string `db:"secret"`    // 对外应用密钥
		StateEm  int64  `db:"state_em"`  // 应用状态
		RenterId int64  `db:"renter_id"` // 租户id
		Name     string `db:"name"`      // 应用名称
		ClasEm   int64  `db:"clas_em"`   // 应用类型
		ExpireAt int64  `db:"expire_at"` // 应用到期时间戳
		CreateAt int64  `db:"create_at"` // 创建时间戳
		UpdateAt int64  `db:"update_at"` // 更新时间戳
		DeleteAt int64  `db:"delete_at"` // 删除时间戳
	}
)

func newPlatMainModel(conn sqlx.SqlConn) *defaultPlatMainModel {
	return &defaultPlatMainModel{
		conn:            conn,
		table:           "`plat_main`",
		softDeleteField: "delete_at",
		softDeleteState: true,
		whereData:       make([]any, 0),
	}
}

func (m *defaultPlatMainModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPlatMainModel) FindOne(ctx context.Context, id int64) (*PlatMain, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", platMainRows, m.table)
	var resp PlatMain
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPlatMainModel) Insert(ctx context.Context, data *PlatMain) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, platMainRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Appid, data.Secret, data.StateEm, data.RenterId, data.Name, data.ClasEm, data.ExpireAt, data.DeleteAt)
	return ret, err
}

func (m *defaultPlatMainModel) Update(ctx context.Context, data *PlatMain) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, platMainRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Appid, data.Secret, data.StateEm, data.RenterId, data.Name, data.ClasEm, data.ExpireAt, data.DeleteAt, data.Id)
	return err
}

func (m *defaultPlatMainModel) tableName() string {
	return m.table
}
