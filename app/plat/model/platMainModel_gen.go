// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"go-zero-dandan/common/dao"
	"go-zero-dandan/common/redisd"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var ErrNotFound = sqlx.ErrNotFound
var (
	platMainFieldNames          = builder.RawFieldNames(&PlatMain{})
	platMainRows                = strings.Join(platMainFieldNames, ",")
	defaultPlatMainFields       = strings.Join(platMainFieldNames, ",")
	platMainRowsExpectAutoSet   = strings.Join(stringx.Remove(platMainFieldNames, "`delete_at`"), ",")
	platMainRowsWithPlaceHolder = strings.Join(stringx.Remove(platMainFieldNames, "`id`", "`delete_at`"), "=?,") + "=?"
)

const (
	PlatMain_Id          dao.TableField = "id"
	PlatMain_Appid       dao.TableField = "appid"
	PlatMain_Secret      dao.TableField = "secret"
	PlatMain_StateEm     dao.TableField = "state_em"
	PlatMain_RenterId    dao.TableField = "renter_id"
	PlatMain_Name        dao.TableField = "name"
	PlatMain_ClasEm      dao.TableField = "clas_em"
	PlatMain_ExpireAt    dao.TableField = "expire_at"
	PlatMain_DataLevelEm dao.TableField = "data_level_em"
	PlatMain_CreateAt    dao.TableField = "create_at"
	PlatMain_UpdateAt    dao.TableField = "update_at"
	PlatMain_DeleteAt    dao.TableField = "delete_at"
)

type (
	platMainModel interface {
		Delete(id ...string) (effectRow int64, danErr error)
		TxDelete(tx *sql.Tx, id ...string) (effectRow int64, danErr error)
		Insert(data *PlatMain) (effectRow int64, danErr error)
		TxInsert(tx *sql.Tx, data *PlatMain) (effectRow int64, danErr error)
		Update(data map[dao.TableField]any) (effectRow int64, danErr error)
		TxUpdate(tx *sql.Tx, data map[dao.TableField]any) (effectRow int64, danErr error)
		Save(data *PlatMain) (effectRow int64, danErr error)
		TxSave(tx *sql.Tx, data *PlatMain) (effectRow int64, danErr error)
		Field(field string) *defaultPlatMainModel
		Except(fields ...string) *defaultPlatMainModel
		Alias(alias string) *defaultPlatMainModel
		Where(whereStr string, whereData ...any) *defaultPlatMainModel
		WhereId(id string) *defaultPlatMainModel
		Order(order string) *defaultPlatMainModel
		Limit(num int64) *defaultPlatMainModel
		Plat(id string) *defaultPlatMainModel
		Find() (*PlatMain, error)
		FindById(id string) (data *PlatMain, danErr error)
		CacheFind(redis *redisd.Redisd) (data *PlatMain, danErr error)
		CacheFindById(redis *redisd.Redisd, id string) (data *PlatMain, danErr error)
		Page(page int64, rows int64) *defaultPlatMainModel
		Total() (total int64, danErr error)
		Select() (dataList []*PlatMain, danErr error)
		SelectWithTotal() (dataList []*PlatMain, total int64, danErr error)
		CacheSelect(redis *redisd.Redisd) (dataList []*PlatMain, danErr error)
		Count() (total int64, danErr error)
		Inc(field string, num int) (effectRow int64, danErr error)
		Dec(field string, num int) (effectRow int64, danErr error)
		Ctx(ctx context.Context) *defaultPlatMainModel
		Reinit() *defaultPlatMainModel
		Dao() *dao.SqlxDao
	}

	defaultPlatMainModel struct {
		conn            sqlx.SqlConn
		table           string
		dao             *dao.SqlxDao
		softDeleteField string
		softDeletable   bool
		fieldSql        string
		whereSql        string
		aliasSql        string
		orderSql        string
		platId          string
		whereData       []any
		err             error
		ctx             context.Context
	}

	PlatMain struct {
		Id          string `db:"id" json:"id"`
		Appid       string `db:"appid" json:"appid"`               // 对外应用标识
		Secret      string `db:"secret" json:"secret"`             // 对外应用密钥
		StateEm     int64  `db:"state_em" json:"stateEm"`          // 应用状态
		RenterId    int64  `db:"renter_id" json:"renterId"`        // 租户id
		Name        string `db:"name" json:"name"`                 // 应用名称
		ClasEm      int64  `db:"clas_em" json:"clasEm"`            // 应用类型
		ExpireAt    int64  `db:"expire_at" json:"expireAt"`        // 应用到期时间戳
		DataLevelEm int64  `db:"data_level_em" json:"dataLevelEm"` // 应用数据隔离级别，0单应用级，1同用户所有应用，99不隔离平台应用
		CreateAt    int64  `db:"create_at" json:"createAt"`        // 创建时间戳
		UpdateAt    int64  `db:"update_at" json:"updateAt"`        // 更新时间戳
		DeleteAt    int64  `db:"delete_at" json:"deleteAt"`        // 删除时间戳
	}
)

// NewPlatMainModel returns a model for the database table.
func NewPlatMainModel(ctxOrNil context.Context, conn sqlx.SqlConn, platId ...string) PlatMainModel {
	var platid string
	if len(platId) > 0 {
		platid = platId[0]
	} else {
		platid = ""
	}
	if ctxOrNil == nil {
		ctxOrNil = context.Background()
	}
	return &customPlatMainModel{
		defaultPlatMainModel: newPlatMainModel(ctxOrNil, conn, platid),
		softDeletable:        softDeletablePlatMain,
	}
}
func newPlatMainModel(ctx context.Context, conn sqlx.SqlConn, platId string) *defaultPlatMainModel {
	dao := dao.NewSqlxDao(conn, "`plat_main`", defaultPlatMainFields, true, "delete_at")
	dao.Plat(platId)
	dao.Ctx(ctx)
	return &defaultPlatMainModel{
		ctx:             ctx,
		conn:            conn,
		dao:             dao,
		table:           "`plat_main`",
		platId:          platId,
		softDeleteField: "delete_at",
		whereData:       make([]any, 0),
	}
}
func (m *defaultPlatMainModel) Ctx(ctx context.Context) *defaultPlatMainModel {
	m.dao.Ctx(ctx)
	return m
}
func (m *defaultPlatMainModel) WhereId(id string) *defaultPlatMainModel {
	m.dao.WhereId(id)
	return m
}

func (m *defaultPlatMainModel) Where(whereStr string, whereData ...any) *defaultPlatMainModel {
	m.dao.Where(whereStr, whereData...)
	return m
}

func (m *defaultPlatMainModel) Alias(alias string) *defaultPlatMainModel {
	m.dao.Alias(alias)
	return m
}
func (m *defaultPlatMainModel) Field(field string) *defaultPlatMainModel {
	m.dao.Field(field)
	return m
}
func (m *defaultPlatMainModel) Except(fields ...string) *defaultPlatMainModel {
	m.dao.Except(fields...)
	return m
}
func (m *defaultPlatMainModel) Order(order string) *defaultPlatMainModel {
	m.dao.Order(order)
	return m
}
func (m *defaultPlatMainModel) Limit(num int64) *defaultPlatMainModel {
	m.dao.Limit(num)
	return m
}
func (m *defaultPlatMainModel) Count() (int64, error) {
	return m.dao.Count()
}
func (m *defaultPlatMainModel) Inc(field string, num int) (int64, error) {
	return m.dao.Inc(field, num)
}
func (m *defaultPlatMainModel) TxInc(tx *sql.Tx, field string, num int) (int64, error) {
	return m.dao.TxInc(tx, field, num)
}
func (m *defaultPlatMainModel) Dec(field string, num int) (int64, error) {
	return m.dao.Dec(field, num)
}
func (m *defaultPlatMainModel) TxDec(tx *sql.Tx, field string, num int) (int64, error) {
	return m.dao.Dec(field, num)
}
func (m *defaultPlatMainModel) Plat(id string) *defaultPlatMainModel {
	m.dao.Plat(id)
	return m
}
func (m *defaultPlatMainModel) Reinit() *defaultPlatMainModel {
	m.dao.Reinit()
	return m
}
func (m *defaultPlatMainModel) Dao() *dao.SqlxDao {
	return m.dao
}
func (m *defaultPlatMainModel) Find() (*PlatMain, error) {
	resp := &PlatMain{}
	err := m.dao.Find(resp)
	if err != nil {
		if err == sqlx.ErrNotFound {
			return nil, nil
		}
		return nil, err
	}
	return resp, nil
}
func (m *defaultPlatMainModel) FindById(id string) (*PlatMain, error) {
	resp := &PlatMain{}
	err := m.dao.FindById(resp, id)
	if err != nil {
		if err == sqlx.ErrNotFound {
			return nil, nil
		}
		return nil, err
	}
	return resp, nil
}
func (m *defaultPlatMainModel) CacheFind(redis *redisd.Redisd) (*PlatMain, error) {
	resp := &PlatMain{}
	err := m.dao.CacheFind(redis, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
func (m *defaultPlatMainModel) CacheFindById(redis *redisd.Redisd, id string) (*PlatMain, error) {
	resp := &PlatMain{}
	err := m.dao.CacheFindById(redis, resp, id)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
func (m *defaultPlatMainModel) Total() (total int64, danErr error) {
	return m.dao.Total()
}
func (m *defaultPlatMainModel) Select() ([]*PlatMain, error) {
	resp := make([]*PlatMain, 0)
	err := m.dao.Select(&resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
func (m *defaultPlatMainModel) SelectWithTotal() ([]*PlatMain, int64, error) {
	resp := make([]*PlatMain, 0)
	var total int64
	err := m.dao.Select(&resp, &total)
	if err != nil {
		return nil, 0, err
	}
	return resp, total, nil
}
func (m *defaultPlatMainModel) CacheSelect(redis *redisd.Redisd) ([]*PlatMain, error) {
	resp := make([]*PlatMain, 0)
	err := m.dao.CacheSelect(redis, &resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultPlatMainModel) Page(page int64, size int64) *defaultPlatMainModel {
	m.dao.Page(page, size)
	return m
}
func (m *defaultPlatMainModel) Insert(data *PlatMain) (effectRow int64, danErr error) {
	insertData, err := dao.PrepareData(data)
	if err != nil {
		return 0, err
	}
	return m.dao.Insert(insertData)
}
func (m *defaultPlatMainModel) TxInsert(tx *sql.Tx, data *PlatMain) (effectRow int64, danErr error) {
	insertData, err := dao.PrepareData(data)
	if err != nil {
		return 0, err
	}
	return m.dao.TxInsert(tx, insertData)
}
func (m *defaultPlatMainModel) Delete(id ...string) (effectRow int64, danErr error) {
	return m.dao.Delete(id...)
}
func (m *defaultPlatMainModel) TxDelete(tx *sql.Tx, id ...string) (effectRow int64, danErr error) {
	return m.dao.TxDelete(tx, id...)
}
func (m *defaultPlatMainModel) Update(data map[dao.TableField]any) (effectRow int64, err error) {
	return m.dao.Update(data)
}
func (m *defaultPlatMainModel) TxUpdate(tx *sql.Tx, data map[dao.TableField]any) (effectRow int64, err error) {
	return m.dao.TxUpdate(tx, data)
}
func (m *defaultPlatMainModel) Save(data *PlatMain) (effectRow int64, err error) {
	saveData, err := dao.PrepareData(data)
	if err != nil {
		return 0, err
	}
	return m.dao.Save(saveData)
}
func (m *defaultPlatMainModel) TxSave(tx *sql.Tx, data *PlatMain) (effectRow int64, err error) {
	saveData, err := dao.PrepareData(data)
	if err != nil {
		return 0, err
	}
	return m.dao.Save(saveData)
}
func (m *defaultPlatMainModel) tableName() string {
	return m.table
}

// forGoctl 避免有的model没有time.Time类型时，goctl生成模版会因引入未使用的包而报错
func (m *defaultPlatMainModel) forGoctl() {
	t := time.Time{}
	fmt.Println(t)
}
