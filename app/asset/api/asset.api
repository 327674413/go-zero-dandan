type UploadResp {
	Url      string `json:"url"`
	FileName string `json:"fileName"`
}
type UploadImgReq {
	WatermarkFlag int64 `form:"watermarkFlag"`
}
type DownloadReq {
	Id int64 `form:"id,string"`
}
type DownloadResp {
	Content  []byte `json:"content"`
	FileName string `json:"fileName"`
}
type SuccessResp {
	Msg string `json:"msg"`
}
// 分片上传
type (
	// 初始化分块上传
	MultipartUploadInitReq {
		FileName string `json:"fileName"`
		FileSha1 string `json:"fileSha1"`
		FileSize int64  `json:"fileSize"`
	}
	MultipartUploadInitRes {
		UserId        int64   `json:"userId,string,omitempty"`
		State         int64   `json:"state"`
		FileSha1      string  `json:"fileSha1"`
		FileSize      int64   `json:"fileSize"`
		UploadId      int64   `json:"uploadId,string,omitempty"`
		ChunkSize     int64   `json:"chunkSize"`
		ChunkCount    int64   `json:"chunkCount"`
		ChunkComplete []int64 `json:"chunkComplete"`
	}
	// 上传分块的文件
	MultipartUploadSendReq {
		UploadID   int64 `form:"uploadId,string"`
		ChunkIndex int64 `form:"chunkIndex"`
	}

	// 合并分块的文件并且上传
	MultipartUploadCompleteReq {
		FileSha1 string `json:"fileSha1"`
		UploadId int64  `json:"uploadId,string"`
	}
	// 上传分块的文件
	MultipartUploadCompleteRes {
		UploadId int64 `form:"uploadId,string"`
	}
)

@server(
	timeout: 30s
	middleware: LangMiddleware
	jwt: Auth
)
service asset-api {
	@handler UploadImg
	post /uploadImg(UploadImgReq) returns (UploadResp)
	@handler Upload
	post /upload returns (UploadResp)
}

@server(
	timeout: 999s
	middleware: LangMiddleware,UserInfoMiddleware,UserTokenMiddleware
	jwt: Auth
)
service asset-api {
	@handler Download
	post /download(DownloadReq)
	@handler MultipartUploadInit
	post /multipartUpload/init (MultipartUploadInitReq) returns (MultipartUploadInitRes)
	
	@handler MultipartUploadSend
	post /multipartUpload/send (MultipartUploadSendReq) returns (SuccessResp)
	
	@handler MultipartUploadComplete
	post /multipartUpload/complete (MultipartUploadCompleteReq) returns (MultipartUploadCompleteRes)
}