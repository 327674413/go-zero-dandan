// Code generated by goctl. DO NOT EDIT.
package logic

import (
	"context"

	"go-zero-dandan/app/asset/api/internal/svc"
	"go-zero-dandan/app/asset/api/internal/types"

	"github.com/zeromicro/go-zero/core/logx"
	"go-zero-dandan/app/user/rpc/user"
	"go-zero-dandan/common/resd"
	"go-zero-dandan/common/utild"
)

type MultipartUploadInitLogicGen struct {
	logx.Logger
	ctx          context.Context
	svc          *svc.ServiceContext
	resd         *resd.Resp
	lang         string
	userMainInfo *user.UserMainInfo
	platId       string
	platClasEm   int64
	hasUserInfo  bool
	mustUserInfo bool
	ReqFileName  string `json:"fileName"`
	ReqFileSha1  string `json:"fileSha1"`
	ReqFileSize  string `json:"fileSize"`
	HasReq       struct {
		FileName bool
		FileSha1 bool
		FileSize bool
	}
}

func NewMultipartUploadInitLogicGen(ctx context.Context, svc *svc.ServiceContext) *MultipartUploadInitLogicGen {
	lang, _ := ctx.Value("lang").(string)
	return &MultipartUploadInitLogicGen{
		Logger: logx.WithContext(ctx),
		ctx:    ctx,
		svc:    svc,
		lang:   lang,
		resd:   resd.NewResd(ctx, resd.I18n.NewLang(lang)),
	}
}

func (l *MultipartUploadInitLogicGen) initReq(req *types.MultipartUploadInitReq) error {
	var err error
	if err = l.initPlat(); err != nil {
		return resd.ErrorCtx(l.ctx, err)
	}

	if req.FileName != nil {
		l.ReqFileName = *req.FileName
		l.HasReq.FileName = true
	} else {
		l.HasReq.FileName = false
	}

	if req.FileSha1 != nil {
		l.ReqFileSha1 = *req.FileSha1
		l.HasReq.FileSha1 = true
	} else {
		l.HasReq.FileSha1 = false
	}

	if req.FileSize != nil {
		l.ReqFileSize = *req.FileSize
		l.HasReq.FileSize = true
	} else {
		l.HasReq.FileSize = false
	}
	l.hasUserInfo = true
	l.mustUserInfo = true

	return nil
}

func (l *MultipartUploadInitLogicGen) initUser() (err error) {
	userMainInfo, ok := l.ctx.Value("userMainInfo").(*user.UserMainInfo)
	if !ok {
		return resd.NewErrCtx(l.ctx, "未配置userInfo中间件", resd.UserMainInfoErr)
	}
	l.userMainInfo = userMainInfo
	return nil
}

func (l *MultipartUploadInitLogicGen) initPlat() (err error) {
	platClasEm := utild.AnyToInt64(l.ctx.Value("platClasEm"))
	if platClasEm == 0 {
		return resd.NewErrCtx(l.ctx, "token中未获取到platClasEm", resd.PlatClasErr)
	}
	platId, _ := l.ctx.Value("platId").(string)
	if platId == "" {
		return resd.NewErrCtx(l.ctx, "token中未获取到platId", resd.PlatIdErr)
	}
	l.platId = platId
	l.platClasEm = platClasEm
	return nil
}
