// Code generated by goctl. DO NOT EDIT.
package logic

import (
	"context"

	"go-zero-dandan/app/asset/api/internal/svc"
	"go-zero-dandan/app/asset/api/internal/types"

	"github.com/zeromicro/go-zero/core/logx"
	"go-zero-dandan/common/resd"
	"go-zero-dandan/common/typed"
)

type UploadImgLogicGen struct {
	logx.Logger
	ctx          context.Context
	svc          *svc.ServiceContext
	resd         *resd.Resp
	meta         *typed.ReqMeta
	hasUserInfo  bool
	mustUserInfo bool
	req          struct {
		WatermarkFlag int64 `form:"watermarkFlag"`
	}
	hasReq struct {
		WatermarkFlag bool
	}
}

func NewUploadImgLogicGen(ctx context.Context, svc *svc.ServiceContext) *UploadImgLogicGen {
	meta, _ := ctx.Value("reqMeta").(*typed.ReqMeta)
	if meta == nil {
		meta = &typed.ReqMeta{}
	}
	return &UploadImgLogicGen{
		Logger: logx.WithContext(ctx),
		ctx:    ctx,
		svc:    svc,
		resd:   resd.NewResp(ctx, resd.I18n.NewLang(meta.Lang)),
		meta:   meta,
	}
}

func (l *UploadImgLogicGen) initReq(req *types.UploadImgReq) error {

	if req.WatermarkFlag != nil {
		l.req.WatermarkFlag = *req.WatermarkFlag
		l.hasReq.WatermarkFlag = true
	} else {
		l.hasReq.WatermarkFlag = false
	}
	l.hasUserInfo = true
	l.mustUserInfo = true

	return nil
}
