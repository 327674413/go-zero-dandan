// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package user

import (
	"context"

	"go-zero-dandan/app/user/rpc/types/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	EditUserInfoReq   = pb.EditUserInfoReq
	GetUserFriendList = pb.GetUserFriendList
	IdReq             = pb.IdReq
	SuccResp          = pb.SuccResp
	TokenReq          = pb.TokenReq
	UserMainInfo      = pb.UserMainInfo
	UserRelationInfo  = pb.UserRelationInfo

	User interface {
		GetUserByToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*UserMainInfo, error)
		EditUserInfo(ctx context.Context, in *EditUserInfoReq, opts ...grpc.CallOption) (*SuccResp, error)
		GetUserFriendList(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*GetUserFriendList, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) GetUserByToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*UserMainInfo, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserByToken(ctx, in, opts...)
}

func (m *defaultUser) EditUserInfo(ctx context.Context, in *EditUserInfoReq, opts ...grpc.CallOption) (*SuccResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.EditUserInfo(ctx, in, opts...)
}

func (m *defaultUser) GetUserFriendList(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*GetUserFriendList, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserFriendList(ctx, in, opts...)
}
