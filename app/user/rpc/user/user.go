// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package user

import (
	"context"

	"go-zero-dandan/app/user/rpc/types/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BindUnionUserReq     = pb.BindUnionUserReq
	BindUnionUserResp    = pb.BindUnionUserResp
	EditUserInfoReq      = pb.EditUserInfoReq
	GetUserCronyListReq  = pb.GetUserCronyListReq
	GetUserCronyListResp = pb.GetUserCronyListResp
	GetUserPageReq       = pb.GetUserPageReq
	GetUserPageResp      = pb.GetUserPageResp
	IdReq                = pb.IdReq
	LoginByAccountReq    = pb.LoginByAccountReq
	LoginResp            = pb.LoginResp
	RegByAccountReq      = pb.RegByAccountReq
	SearchUserReq        = pb.SearchUserReq
	SearchUserResp       = pb.SearchUserResp
	SuccResp             = pb.SuccResp
	TokenReq             = pb.TokenReq
	UserCronyInfo        = pb.UserCronyInfo
	UserMainInfo         = pb.UserMainInfo

	User interface {
		GetUserByToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*UserMainInfo, error)
		EditUserInfo(ctx context.Context, in *EditUserInfoReq, opts ...grpc.CallOption) (*SuccResp, error)
		GetUserCronyList(ctx context.Context, in *GetUserCronyListReq, opts ...grpc.CallOption) (*GetUserCronyListResp, error)
		RegByAccount(ctx context.Context, in *RegByAccountReq, opts ...grpc.CallOption) (*LoginResp, error)
		GetUserById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*UserMainInfo, error)
		GetUserPage(ctx context.Context, in *GetUserPageReq, opts ...grpc.CallOption) (*GetUserPageResp, error)
		SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error)
		BindUnionUser(ctx context.Context, in *BindUnionUserReq, opts ...grpc.CallOption) (*BindUnionUserResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) GetUserByToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*UserMainInfo, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserByToken(ctx, in, opts...)
}

func (m *defaultUser) EditUserInfo(ctx context.Context, in *EditUserInfoReq, opts ...grpc.CallOption) (*SuccResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.EditUserInfo(ctx, in, opts...)
}

func (m *defaultUser) GetUserCronyList(ctx context.Context, in *GetUserCronyListReq, opts ...grpc.CallOption) (*GetUserCronyListResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserCronyList(ctx, in, opts...)
}

func (m *defaultUser) RegByAccount(ctx context.Context, in *RegByAccountReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.RegByAccount(ctx, in, opts...)
}

func (m *defaultUser) GetUserById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*UserMainInfo, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserById(ctx, in, opts...)
}

func (m *defaultUser) GetUserPage(ctx context.Context, in *GetUserPageReq, opts ...grpc.CallOption) (*GetUserPageResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserPage(ctx, in, opts...)
}

func (m *defaultUser) SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.SearchUser(ctx, in, opts...)
}

func (m *defaultUser) BindUnionUser(ctx context.Context, in *BindUnionUserReq, opts ...grpc.CallOption) (*BindUnionUserResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.BindUnionUser(ctx, in, opts...)
}
