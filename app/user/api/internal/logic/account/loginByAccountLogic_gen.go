// Code generated by goctl. DO NOT EDIT.
package account

import (
	"context"

	"go-zero-dandan/app/user/api/internal/svc"
	"go-zero-dandan/app/user/api/internal/types"

	"github.com/zeromicro/go-zero/core/logx"
	"go-zero-dandan/common/resd"
	"go-zero-dandan/common/typed"
	"strings"
)

type LoginByAccountLogicGen struct {
	logx.Logger
	ctx          context.Context
	svc          *svc.ServiceContext
	resd         *resd.Resp
	meta         *typed.ReqMeta
	hasUserInfo  bool
	mustUserInfo bool
	req          struct {
		Account   string `json:"account"`
		Password  string `json:"password"`
		CheckCode string `json:"checkCode,optional"`
		PortEm    int64  `json:"portEm"`
	}
	hasReq struct {
		Account   bool
		Password  bool
		CheckCode bool
		PortEm    bool
	}
}

func NewLoginByAccountLogicGen(ctx context.Context, svc *svc.ServiceContext) *LoginByAccountLogicGen {
	meta, _ := ctx.Value("reqMeta").(*typed.ReqMeta)
	if meta == nil {
		meta = &typed.ReqMeta{}
	}
	return &LoginByAccountLogicGen{
		Logger: logx.WithContext(ctx),
		ctx:    ctx,
		svc:    svc,
		resd:   resd.NewResp(ctx, meta.Lang),
		meta:   meta,
	}
}

func (l *LoginByAccountLogicGen) initReq(in *types.LoginByAccountReq) error {

	if in.Account != nil {
		l.req.Account = strings.TrimSpace(*in.Account)
		l.hasReq.Account = true
	} else {
		l.hasReq.Account = false
	}

	if in.Password != nil {
		l.req.Password = strings.TrimSpace(*in.Password)
		l.hasReq.Password = true
	} else {
		l.hasReq.Password = false
	}

	if in.CheckCode != nil {
		l.req.CheckCode = strings.TrimSpace(*in.CheckCode)
		l.hasReq.CheckCode = true
	} else {
		l.hasReq.CheckCode = false
	}

	if in.PortEm != nil {
		l.req.PortEm = *in.PortEm
		l.hasReq.PortEm = true
	} else {
		l.hasReq.PortEm = false
	}
	l.hasUserInfo = true
	l.mustUserInfo = true

	return nil
}
