// Code generated by goctl. DO NOT EDIT.
package userInfo

import (
	"context"

	"go-zero-dandan/app/user/api/internal/svc"
	"go-zero-dandan/app/user/api/internal/types"

	"github.com/zeromicro/go-zero/core/logx"
	"go-zero-dandan/app/user/rpc/user"
	"go-zero-dandan/common/resd"
	"go-zero-dandan/common/utild"
)

type EditMyInfoLogicGen struct {
	logx.Logger
	ctx             context.Context
	svc             *svc.ServiceContext
	resd            *resd.Resp
	lang            string
	userMainInfo    *user.UserMainInfo
	platId          string
	platClasEm      int64
	hasUserInfo     bool
	mustUserInfo    bool
	ReqNickname     string `json:"nickname,optional"`
	ReqSexEm        int64  `json:"sexEm,optional"`
	ReqAvatar       string `json:"avatar,optional"`
	ReqGraduateFrom string `json:"graduateFrom,optional"`
	ReqBirthDate    string `json:"birthDate,optional"`
	HasReq          struct {
		Nickname     bool
		SexEm        bool
		Avatar       bool
		GraduateFrom bool
		BirthDate    bool
	}
}

func NewEditMyInfoLogicGen(ctx context.Context, svc *svc.ServiceContext) *EditMyInfoLogicGen {
	lang, _ := ctx.Value("lang").(string)
	return &EditMyInfoLogicGen{
		Logger: logx.WithContext(ctx),
		ctx:    ctx,
		svc:    svc,
		lang:   lang,
		resd:   resd.NewResp(ctx, resd.I18n.NewLang(lang)),
	}
}

func (l *EditMyInfoLogicGen) initReq(req *types.EditMyInfoReq) error {
	var err error
	if err = l.initPlat(); err != nil {
		return resd.ErrorCtx(l.ctx, err)
	}

	if req.Nickname != nil {
		l.ReqNickname = *req.Nickname
		l.HasReq.Nickname = true
	} else {
		l.HasReq.Nickname = false
	}

	if req.SexEm != nil {
		l.ReqSexEm = *req.SexEm
		l.HasReq.SexEm = true
	} else {
		l.HasReq.SexEm = false
	}

	if req.Avatar != nil {
		l.ReqAvatar = *req.Avatar
		l.HasReq.Avatar = true
	} else {
		l.HasReq.Avatar = false
	}

	if req.GraduateFrom != nil {
		l.ReqGraduateFrom = *req.GraduateFrom
		l.HasReq.GraduateFrom = true
	} else {
		l.HasReq.GraduateFrom = false
	}

	if req.BirthDate != nil {
		l.ReqBirthDate = *req.BirthDate
		l.HasReq.BirthDate = true
	} else {
		l.HasReq.BirthDate = false
	}
	l.hasUserInfo = true
	l.mustUserInfo = true

	return nil
}

func (l *EditMyInfoLogicGen) initUser() (err error) {
	userMainInfo, ok := l.ctx.Value("userMainInfo").(*user.UserMainInfo)
	if !ok {
		return resd.NewErrCtx(l.ctx, "未配置userInfo中间件", resd.ErrUserMainInfo)
	}
	l.userMainInfo = userMainInfo
	return nil
}

func (l *EditMyInfoLogicGen) initPlat() (err error) {
	platClasEm := utild.AnyToInt64(l.ctx.Value("platClasEm"))
	if platClasEm == 0 {
		return resd.NewErrCtx(l.ctx, "token中未获取到platClasEm", resd.ErrPlatClas)
	}
	platId, _ := l.ctx.Value("platId").(string)
	if platId == "" {
		return resd.NewErrCtx(l.ctx, "token中未获取到platId", resd.ErrPlatId)
	}
	l.platId = platId
	l.platClasEm = platClasEm
	return nil
}
