// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userInfoFieldNames          = builder.RawFieldNames(&UserInfo{})
	userInfoRows                = strings.Join(userInfoFieldNames, ",")
	userInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(userInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(userInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userInfoModel interface {
		Insert(ctx context.Context, data *UserInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserInfo, error)
		Update(ctx context.Context, data *UserInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserInfo struct {
		Id        int64     `db:"id"`
		BirthDate time.Time `db:"birth_date"` // 出生日期
		UserId    int64     `db:"user_id"`    // 用户id
		PlatId    int64     `db:"plat_id"`    // 应用id
		CreateAt  int64     `db:"create_at"`  // 创建时间戳
		UpdateAt  int64     `db:"update_at"`  // 更新时间戳
		DeleteAt  int64     `db:"delete_at"`  // 删除时间戳
	}
)

func newUserInfoModel(conn sqlx.SqlConn) *defaultUserInfoModel {
	return &defaultUserInfoModel{
		conn:  conn,
		table: "`user_info`",
	}
}

func (m *defaultUserInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserInfoModel) FindOne(ctx context.Context, id int64) (*UserInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userInfoRows, m.table)
	var resp UserInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInfoModel) Insert(ctx context.Context, data *UserInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, userInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BirthDate, data.UserId, data.PlatId, data.DeleteAt)
	return ret, err
}

func (m *defaultUserInfoModel) Update(ctx context.Context, data *UserInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.BirthDate, data.UserId, data.PlatId, data.DeleteAt, data.Id)
	return err
}

func (m *defaultUserInfoModel) tableName() string {
	return m.table
}
