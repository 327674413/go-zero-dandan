// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"go-zero-dandan/common/dao"
	"go-zero-dandan/common/redisd"
	"go-zero-dandan/common/utild"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userInfoFieldNames          = builder.RawFieldNames(&UserInfo{})
	userInfoRows                = strings.Join(userInfoFieldNames, ",")
	userInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(userInfoFieldNames, "`delete_at`"), ",")
	userInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(userInfoFieldNames, "`id`", "`delete_at`"), "=?,") + "=?"
)

type (
	userInfoModel interface {
		Insert(ctx context.Context, data map[string]string) (int64, error)
		TxInsert(tx *sql.Tx, ctx context.Context, data map[string]string) (int64, error)
		FindOne(ctx context.Context, id int64) (*UserInfo, error)
		Update(ctx context.Context, data map[string]string) (affectRows int64, err error)
		Save(ctx context.Context, data map[string]string) (int64, error)
		Delete(ctx context.Context, id ...int64) (int64, error)
		Field(field string) *defaultUserInfoModel
		Alias(alias string) *defaultUserInfoModel
		WhereStr(whereStr string) *defaultUserInfoModel
		WhereId(id int) *defaultUserInfoModel
		WhereRaw(whereStr string, whereData []any) *defaultUserInfoModel
		Order(order string) *defaultUserInfoModel
		Plat(id int) *defaultUserInfoModel
		Find(ctx context.Context, id ...any) (*UserInfo, error)
		CacheFind(ctx context.Context, redis *redisd.Redisd, id ...int64) (*UserInfo, error)
		Page(ctx context.Context, page int, rows int) ([]*UserInfo, error)
		List(ctx context.Context) ([]*UserInfo, error)
		Count(ctx context.Context) (int, error)
		Inc(ctx context.Context, field string, num int) (int64, error)
		Dec(ctx context.Context, field string, num int) (int64, error)
	}

	defaultUserInfoModel struct {
		conn            sqlx.SqlConn
		dao             *dao.SqlxDao
		table           string
		softDeleteField string
		softDeletable   bool
		fieldSql        string
		whereSql        string
		aliasSql        string
		orderSql        string
		platId          int64
		whereData       []any
		err             error
	}

	UserInfo struct {
		Id           int64     `db:"id"`
		BirthDate    time.Time `db:"birth_date"`    // 出生日期
		GraduateFrom string    `db:"graduate_from"` // 毕业学校
		PlatId       int64     `db:"plat_id"`       // 应用id
		CreateAt     int64     `db:"create_at"`     // 创建时间戳
		UpdateAt     int64     `db:"update_at"`     // 更新时间戳
		DeleteAt     int64     `db:"delete_at"`     // 删除时间戳
	}
)

func newUserInfoModel(conn sqlx.SqlConn, platId int64) *defaultUserInfoModel {
	dao := dao.NewSqlxDao(conn, "`user_info`", userInfoRows, false, "delete_at")
	return &defaultUserInfoModel{
		conn:            conn,
		dao:             dao,
		table:           "`user_info`",
		softDeleteField: "delete_at",
		whereData:       make([]any, 0),
		platId:          platId,
	}
}

func (m *defaultUserInfoModel) WhereId(id int) *defaultUserInfoModel {
	m.dao.WhereId(id)
	return m
}

func (m *defaultUserInfoModel) WhereStr(whereStr string) *defaultUserInfoModel {
	fmt.Println("进来了")
	m.dao.WhereStr(whereStr)
	return m
}

func (m *defaultUserInfoModel) WhereRaw(whereStr string, whereData []any) *defaultUserInfoModel {
	m.dao.WhereRaw(whereStr, whereData)
	return m
}
func (m *defaultUserInfoModel) Alias(alias string) *defaultUserInfoModel {
	m.dao.Alias(alias)
	return m
}
func (m *defaultUserInfoModel) Field(field string) *defaultUserInfoModel {
	m.dao.Field(field)
	return m
}
func (m *defaultUserInfoModel) Order(order string) *defaultUserInfoModel {
	m.dao.Order(order)
	return m
}
func (m *defaultUserInfoModel) Count(ctx context.Context) (int, error) {
	return m.dao.Count(ctx)
}
func (m *defaultUserInfoModel) Inc(ctx context.Context, field string, num int) (int64, error) {
	return m.dao.Inc(ctx, field, num)
}
func (m *defaultUserInfoModel) TxInc(tx *sql.Tx, ctx context.Context, field string, num int) (int64, error) {
	return m.dao.TxInc(tx, ctx, field, num)
}
func (m *defaultUserInfoModel) Dec(ctx context.Context, field string, num int) (int64, error) {
	return m.dao.Dec(ctx, field, num)
}
func (m *defaultUserInfoModel) TxDec(tx *sql.Tx, ctx context.Context, field string, num int) (int64, error) {
	return m.dao.TxDec(tx, ctx, field, num)
}
func (m *defaultUserInfoModel) Plat(id int) *defaultUserInfoModel {

	return nil
}
func (m *defaultUserInfoModel) CacheFind(ctx context.Context, redis *redisd.Redisd, id ...int64) (*UserInfo, error) {
	resp := &UserInfo{}
	data, err := m.dao.CacheFind(ctx, redis, id...)
	if err != nil {
		return nil, err
	}
	utild.SetModelFromMap(data, resp)
	return resp, nil
}

func (m *defaultUserInfoModel) Delete(ctx context.Context, id ...int64) (int64, error) {
	return m.dao.Delete(ctx, id...)
}
func (m *defaultUserInfoModel) TxDelete(tx *sql.Tx, ctx context.Context, id ...int64) (int64, error) {
	return m.dao.TxDelete(tx, ctx, id...)
}
func (m *defaultUserInfoModel) Find(ctx context.Context, id ...any) (*UserInfo, error) {
	resp := &UserInfo{}
	data, err := m.dao.Find(ctx, id...)
	if err != nil {
		return nil, err
	}
	utild.SetModelFromMap(data, resp)
	return resp, nil
}
func (m *defaultUserInfoModel) List(ctx context.Context) ([]*UserInfo, error) {
	resp := make([]*UserInfo, 0)
	return resp, nil
}
func (m *defaultUserInfoModel) Page(ctx context.Context, page int, rows int) ([]*UserInfo, error) {
	resp := make([]*UserInfo, 0)
	return resp, nil
}
func (m *defaultUserInfoModel) FindOne(ctx context.Context, id int64) (*UserInfo, error) {
	resp := &UserInfo{}
	return resp, nil
}
func (m *defaultUserInfoModel) Reinit() {
	m.dao.Reinit()
}

func (m *defaultUserInfoModel) Insert(ctx context.Context, data map[string]string) (int64, error) {
	return 0, nil
}
func (m *defaultUserInfoModel) TxInsert(tx *sql.Tx, ctx context.Context, data map[string]string) (int64, error) {

	return 0, nil
}
func (m *defaultUserInfoModel) Update(ctx context.Context, data map[string]string) (int64, error) {
	return m.dao.Update(ctx, data)
}
func (m *defaultUserInfoModel) Save(ctx context.Context, data map[string]string) (int64, error) {
	return m.dao.Save(ctx, data)
}

func (m *defaultUserInfoModel) tableName() string {
	return m.table
}
