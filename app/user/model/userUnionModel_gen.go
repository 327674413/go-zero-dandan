// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"go-zero-dandan/common/dao"
	"go-zero-dandan/common/redisd"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userUnionFieldNames          = builder.RawFieldNames(&UserUnion{})
	userUnionRows                = strings.Join(userUnionFieldNames, ",")
	defaultUserUnionFields       = strings.Join(userUnionFieldNames, ",")
	userUnionRowsExpectAutoSet   = strings.Join(stringx.Remove(userUnionFieldNames, "`delete_at`"), ",")
	userUnionRowsWithPlaceHolder = strings.Join(stringx.Remove(userUnionFieldNames, "`id`", "`delete_at`"), "=?,") + "=?"
)

type (
	userUnionModel interface {
		Insert(data map[string]string) (int64, error)
		TxInsert(tx *sql.Tx, data map[string]string) (int64, error)
		Update(data map[string]string) (int64, error)
		TxUpdate(tx *sql.Tx, data map[string]string) (int64, error)
		Save(data map[string]string) (int64, error)
		TxSave(tx *sql.Tx, data map[string]string) (int64, error)
		Delete(ctx context.Context, id int64) error
		Field(field string) *defaultUserUnionModel
		Alias(alias string) *defaultUserUnionModel
		Where(whereStr string, whereData ...any) *defaultUserUnionModel
		WhereId(id int64) *defaultUserUnionModel
		Order(order string) *defaultUserUnionModel
		Plat(id int64) *defaultUserUnionModel
		Find() (*UserUnion, error)
		FindById(id int64) (*UserUnion, error)
		CacheFind(redis *redisd.Redisd) (*UserUnion, error)
		CacheFindById(redis *redisd.Redisd, id int64) (*UserUnion, error)
		Page(page int64, rows int64) *defaultUserUnionModel
		Select() ([]*UserUnion, error)
		CacheSelect(redis *redisd.Redisd) ([]*UserUnion, error)
		Count() (int64, error)
		Inc(field string, num int) (int64, error)
		Dec(field string, num int) (int64, error)
		Ctx(ctx context.Context) *defaultUserUnionModel
		Reinit() *defaultUserUnionModel
	}

	defaultUserUnionModel struct {
		conn            sqlx.SqlConn
		table           string
		dao             *dao.SqlxDao
		softDeleteField string
		softDeletable   bool
		fieldSql        string
		whereSql        string
		aliasSql        string
		orderSql        string
		platId          int64
		whereData       []any
		err             error
		ctx             context.Context
	}

	UserUnion struct {
		Id       int64 `db:"id"`
		CreateAt int64 `db:"create_at"` // 创建时间戳
		UpdateAt int64 `db:"update_at"` // 更新时间戳
		DeleteAt int64 `db:"delete_at"` // 删除时间戳
	}
)

func newUserUnionModel(conn sqlx.SqlConn, platId int64) *defaultUserUnionModel {
	dao := dao.NewSqlxDao(conn, "`user_union`", defaultUserUnionFields, true, "delete_at")
	dao.Plat(platId)
	return &defaultUserUnionModel{
		conn:            conn,
		dao:             dao,
		table:           "`user_union`",
		platId:          platId,
		softDeleteField: "delete_at",
		whereData:       make([]any, 0),
	}
}
func (m *defaultUserUnionModel) Ctx(ctx context.Context) *defaultUserUnionModel {
	m.dao.Ctx(ctx)
	return m
}
func (m *defaultUserUnionModel) WhereId(id int64) *defaultUserUnionModel {
	m.dao.WhereId(id)
	return m
}

func (m *defaultUserUnionModel) Where(whereStr string, whereData ...any) *defaultUserUnionModel {
	m.dao.Where(whereStr, whereData...)
	return m
}

func (m *defaultUserUnionModel) Alias(alias string) *defaultUserUnionModel {
	m.dao.Alias(alias)
	return m
}
func (m *defaultUserUnionModel) Field(field string) *defaultUserUnionModel {
	m.dao.Field(field)
	return m
}
func (m *defaultUserUnionModel) Order(order string) *defaultUserUnionModel {
	m.dao.Order(order)
	return m
}
func (m *defaultUserUnionModel) Count() (int64, error) {
	return m.dao.Count()
}
func (m *defaultUserUnionModel) Inc(field string, num int) (int64, error) {
	return m.dao.Inc(field, num)
}
func (m *defaultUserUnionModel) TxInc(tx *sql.Tx, field string, num int) (int64, error) {
	return m.dao.TxInc(tx, field, num)
}
func (m *defaultUserUnionModel) Dec(field string, num int) (int64, error) {
	return m.dao.Dec(field, num)
}
func (m *defaultUserUnionModel) TxDec(tx *sql.Tx, field string, num int) (int64, error) {
	return m.dao.Dec(field, num)
}
func (m *defaultUserUnionModel) Plat(id int64) *defaultUserUnionModel {
	m.dao.Plat(id)
	return m
}
func (m *defaultUserUnionModel) Reinit() *defaultUserUnionModel {
	m.dao.Reinit()
	return m
}

func (m *defaultUserUnionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserUnionModel) Find() (*UserUnion, error) {
	resp := &UserUnion{}
	err := m.dao.Find(resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
func (m *defaultUserUnionModel) FindById(id int64) (*UserUnion, error) {
	resp := &UserUnion{}
	err := m.dao.FindById(resp, id)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
func (m *defaultUserUnionModel) CacheFind(redis *redisd.Redisd) (*UserUnion, error) {
	resp := &UserUnion{}
	err := m.dao.CacheFind(redis, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
func (m *defaultUserUnionModel) CacheFindById(redis *redisd.Redisd, id int64) (*UserUnion, error) {
	resp := &UserUnion{}
	err := m.dao.CacheFindById(redis, resp, id)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultUserUnionModel) Select() ([]*UserUnion, error) {
	var resp []*UserUnion
	err := m.dao.Select(resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
func (m *defaultUserUnionModel) CacheSelect(redis *redisd.Redisd) ([]*UserUnion, error) {
	var resp []*UserUnion
	err := m.dao.CacheSelect(redis, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
func (m *defaultUserUnionModel) Page(page int64, rows int64) *defaultUserUnionModel {
	m.dao.Page(page, rows)
	return m
}

func (m *defaultUserUnionModel) Insert(data map[string]string) (int64, error) {
	return m.dao.Insert(data)
}
func (m *defaultUserUnionModel) TxInsert(tx *sql.Tx, data map[string]string) (int64, error) {
	return m.dao.TxInsert(tx, data)
}

func (m *defaultUserUnionModel) Update(data map[string]string) (int64, error) {
	return m.dao.Update(data)
}
func (m *defaultUserUnionModel) TxUpdate(tx *sql.Tx, data map[string]string) (int64, error) {
	return m.dao.TxUpdate(tx, data)
}
func (m *defaultUserUnionModel) Save(data map[string]string) (int64, error) {
	return m.dao.Save(data)
}
func (m *defaultUserUnionModel) TxSave(tx *sql.Tx, data map[string]string) (int64, error) {
	return m.dao.Save(data)
}

func (m *defaultUserUnionModel) tableName() string {
	return m.table
}
