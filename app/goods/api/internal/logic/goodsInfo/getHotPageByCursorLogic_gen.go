// Code generated by goctl. DO NOT EDIT.
package goodsInfo

import (
	"context"

	"go-zero-dandan/app/goods/api/internal/svc"
	"go-zero-dandan/app/goods/api/internal/types"

	"github.com/zeromicro/go-zero/core/logx"
	"go-zero-dandan/app/user/rpc/user"
	"go-zero-dandan/common/resd"
	"go-zero-dandan/common/utild"
)

type GetHotPageByCursorLogicGen struct {
	logx.Logger
	ctx          context.Context
	svc          *svc.ServiceContext
	resd         *resd.Resp
	lang         string
	userMainInfo *user.UserMainInfo
	platId       string
	platClasEm   int64
	hasUserInfo  bool
	mustUserInfo bool
	ReqCursor    string `json:"cursor,optional"`
	ReqSize      string `json:"size,optional"`
	ReqPage      string `json:"page,optional"`
	HasReq       struct {
		Cursor bool
		Size   bool
		Page   bool
	}
}

func NewGetHotPageByCursorLogicGen(ctx context.Context, svc *svc.ServiceContext) *GetHotPageByCursorLogicGen {
	lang, _ := ctx.Value("lang").(string)
	return &GetHotPageByCursorLogicGen{
		Logger: logx.WithContext(ctx),
		ctx:    ctx,
		svc:    svc,
		lang:   lang,
		resd:   resd.NewResd(ctx, resd.I18n.NewLang(lang)),
	}
}

func (l *GetHotPageByCursorLogicGen) initReq(req *types.GetHotPageByCursorReq) error {
	var err error
	if err = l.initPlat(); err != nil {
		return resd.ErrorCtx(l.ctx, err)
	}

	if req.Cursor != nil {
		l.ReqCursor = *req.Cursor
		l.HasReq.Cursor = true
	} else {
		l.HasReq.Cursor = false
	}

	if req.Size != nil {
		l.ReqSize = *req.Size
		l.HasReq.Size = true
	} else {
		l.HasReq.Size = false
	}

	if req.Page != nil {
		l.ReqPage = *req.Page
		l.HasReq.Page = true
	} else {
		l.HasReq.Page = false
	}
	l.hasUserInfo = true

	return nil
}

func (l *GetHotPageByCursorLogicGen) initUser() (err error) {
	userMainInfo, ok := l.ctx.Value("userMainInfo").(*user.UserMainInfo)
	if !ok {
		return resd.NewErrCtx(l.ctx, "未配置userInfo中间件", resd.UserMainInfoErr)
	}
	l.userMainInfo = userMainInfo
	return nil
}

func (l *GetHotPageByCursorLogicGen) initPlat() (err error) {
	platClasEm := utild.AnyToInt64(l.ctx.Value("platClasEm"))
	if platClasEm == 0 {
		return resd.NewErrCtx(l.ctx, "token中未获取到platClasEm", resd.PlatClasErr)
	}
	platId, _ := l.ctx.Value("platId").(string)
	if platId == "" {
		return resd.NewErrCtx(l.ctx, "token中未获取到platId", resd.PlatIdErr)
	}
	l.platId = platId
	l.platClasEm = platClasEm
	return nil
}
