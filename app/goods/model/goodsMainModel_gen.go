// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"go-zero-dandan/common/dao"
	"go-zero-dandan/common/redisd"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsMainFieldNames          = builder.RawFieldNames(&GoodsMain{})
	goodsMainRows                = strings.Join(goodsMainFieldNames, ",")
	defaultGoodsMainFields       = strings.Join(goodsMainFieldNames, ",")
	goodsMainRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsMainFieldNames, "`delete_at`"), ",")
	goodsMainRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsMainFieldNames, "`id`", "`delete_at`"), "=?,") + "=?"
)

type (
	goodsMainModel interface {
		Insert(data map[string]string) (int64, error)
		TxInsert(tx *sql.Tx, data map[string]string) (int64, error)
		Update(data map[string]string) (int64, error)
		TxUpdate(tx *sql.Tx, data map[string]string) (int64, error)
		Save(data map[string]string) (int64, error)
		TxSave(tx *sql.Tx, data map[string]string) (int64, error)
		Delete(ctx context.Context, id int64) error
		Field(field string) *defaultGoodsMainModel
		Alias(alias string) *defaultGoodsMainModel
		Where(whereStr string, whereData ...any) *defaultGoodsMainModel
		WhereId(id int64) *defaultGoodsMainModel
		Order(order string) *defaultGoodsMainModel
		Limit(num int64) *defaultGoodsMainModel
		Plat(id int64) *defaultGoodsMainModel
		Find() (*GoodsMain, error)
		FindById(id int64) (*GoodsMain, error)
		CacheFind(redis *redisd.Redisd) (*GoodsMain, error)
		CacheFindById(redis *redisd.Redisd, id int64) (*GoodsMain, error)
		Page(page int64, rows int64) *defaultGoodsMainModel
		Select() ([]*GoodsMain, error)
		SelectWithTotal() ([]*GoodsMain, int64, error)
		CacheSelect(redis *redisd.Redisd) ([]*GoodsMain, error)
		Count() (int64, error)
		Inc(field string, num int) (int64, error)
		Dec(field string, num int) (int64, error)
		Ctx(ctx context.Context) *defaultGoodsMainModel
		Reinit() *defaultGoodsMainModel
	}

	defaultGoodsMainModel struct {
		conn            sqlx.SqlConn
		table           string
		dao             *dao.SqlxDao
		softDeleteField string
		softDeletable   bool
		fieldSql        string
		whereSql        string
		aliasSql        string
		orderSql        string
		platId          int64
		whereData       []any
		err             error
		ctx             context.Context
	}

	GoodsMain struct {
		Id        int64  `db:"id"`
		Name      string `db:"name"`       // 商品名称
		Spec      string `db:"spec"`       // 商品规格
		Cover     string `db:"cover"`      // 商品封面
		SellPrice int64  `db:"sell_price"` // 商品售价
		StoreQty  int64  `db:"store_qty"`  // 当前库存
		State     int64  `db:"state"`      // 0未上架，1上架
		IsSpecial int64  `db:"is_special"` // 是否活动专用的特殊商品
		UnidId    int64  `db:"unid_id"`    // 单位
		UnitName  string `db:"unit_name"`  // 单位名称
		PlatId    int64  `db:"plat_id"`
		CreateAt  int64  `db:"create_at"`
		EditAt    int64  `db:"edit_at"`
		DeleteAt  int64  `db:"delete_at"`
	}
)

func newGoodsMainModel(conn sqlx.SqlConn, platId int64) *defaultGoodsMainModel {
	dao := dao.NewSqlxDao(conn, "`goods_main`", defaultGoodsMainFields, true, "delete_at")
	dao.Plat(platId)
	return &defaultGoodsMainModel{
		conn:            conn,
		dao:             dao,
		table:           "`goods_main`",
		platId:          platId,
		softDeleteField: "delete_at",
		whereData:       make([]any, 0),
	}
}
func (m *defaultGoodsMainModel) Ctx(ctx context.Context) *defaultGoodsMainModel {
	m.dao.Ctx(ctx)
	return m
}
func (m *defaultGoodsMainModel) WhereId(id int64) *defaultGoodsMainModel {
	m.dao.WhereId(id)
	return m
}

func (m *defaultGoodsMainModel) Where(whereStr string, whereData ...any) *defaultGoodsMainModel {
	m.dao.Where(whereStr, whereData...)
	return m
}

func (m *defaultGoodsMainModel) Alias(alias string) *defaultGoodsMainModel {
	m.dao.Alias(alias)
	return m
}
func (m *defaultGoodsMainModel) Field(field string) *defaultGoodsMainModel {
	m.dao.Field(field)
	return m
}
func (m *defaultGoodsMainModel) Order(order string) *defaultGoodsMainModel {
	m.dao.Order(order)
	return m
}
func (m *defaultGoodsMainModel) Limit(num int64) *defaultGoodsMainModel {
	m.dao.Limit(num)
	return m
}
func (m *defaultGoodsMainModel) Count() (int64, error) {
	return m.dao.Count()
}
func (m *defaultGoodsMainModel) Inc(field string, num int) (int64, error) {
	return m.dao.Inc(field, num)
}
func (m *defaultGoodsMainModel) TxInc(tx *sql.Tx, field string, num int) (int64, error) {
	return m.dao.TxInc(tx, field, num)
}
func (m *defaultGoodsMainModel) Dec(field string, num int) (int64, error) {
	return m.dao.Dec(field, num)
}
func (m *defaultGoodsMainModel) TxDec(tx *sql.Tx, field string, num int) (int64, error) {
	return m.dao.Dec(field, num)
}
func (m *defaultGoodsMainModel) Plat(id int64) *defaultGoodsMainModel {
	m.dao.Plat(id)
	return m
}
func (m *defaultGoodsMainModel) Reinit() *defaultGoodsMainModel {
	m.dao.Reinit()
	return m
}

func (m *defaultGoodsMainModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGoodsMainModel) Find() (*GoodsMain, error) {
	resp := &GoodsMain{}
	err := m.dao.Find(resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
func (m *defaultGoodsMainModel) FindById(id int64) (*GoodsMain, error) {
	resp := &GoodsMain{}
	err := m.dao.FindById(resp, id)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
func (m *defaultGoodsMainModel) CacheFind(redis *redisd.Redisd) (*GoodsMain, error) {
	resp := &GoodsMain{}
	err := m.dao.CacheFind(redis, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
func (m *defaultGoodsMainModel) CacheFindById(redis *redisd.Redisd, id int64) (*GoodsMain, error) {
	resp := &GoodsMain{}
	err := m.dao.CacheFindById(redis, resp, id)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultGoodsMainModel) Select() ([]*GoodsMain, error) {
	resp := make([]*GoodsMain, 0)
	err := m.dao.Select(&resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
func (m *defaultGoodsMainModel) SelectWithTotal() ([]*GoodsMain, int64, error) {
	resp := make([]*GoodsMain, 0)
	var total int64
	err := m.dao.Select(&resp, &total)
	if err != nil {
		return nil, 0, err
	}
	return resp, total, nil
}
func (m *defaultGoodsMainModel) CacheSelect(redis *redisd.Redisd) ([]*GoodsMain, error) {
	resp := make([]*GoodsMain, 0)
	err := m.dao.CacheSelect(redis, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultGoodsMainModel) Page(page int64, rows int64) *defaultGoodsMainModel {
	m.dao.Page(page, rows)
	return m
}

func (m *defaultGoodsMainModel) Insert(data map[string]string) (int64, error) {
	return m.dao.Insert(data)
}
func (m *defaultGoodsMainModel) TxInsert(tx *sql.Tx, data map[string]string) (int64, error) {
	return m.dao.TxInsert(tx, data)
}

func (m *defaultGoodsMainModel) Update(data map[string]string) (int64, error) {
	return m.dao.Update(data)
}
func (m *defaultGoodsMainModel) TxUpdate(tx *sql.Tx, data map[string]string) (int64, error) {
	return m.dao.TxUpdate(tx, data)
}
func (m *defaultGoodsMainModel) Save(data map[string]string) (int64, error) {
	return m.dao.Save(data)
}
func (m *defaultGoodsMainModel) TxSave(tx *sql.Tx, data map[string]string) (int64, error) {
	return m.dao.Save(data)
}

func (m *defaultGoodsMainModel) tableName() string {
	return m.table
}
