// Code generated by goctl. DO NOT EDIT.
package logic

import (
	"context"
	"go-zero-dandan/app/social/rpc/internal/svc"
	"go-zero-dandan/app/social/rpc/types/socialRpc"
	"go-zero-dandan/common/resd"
	"go-zero-dandan/common/typed"

	"github.com/zeromicro/go-zero/core/logx"
)

type GetUserRecvFriendApplyPageLogicGen struct {
	ctx  context.Context
	svc  *svc.ServiceContext
	resd *resd.Resp
	meta *typed.ReqMeta
	logx.Logger
	req struct {
		UserId      string
		PlatId      string
		Page        int64
		Size        int64
		IsNeedTotal int64
		Match       map[string]*socialRpc.MatchField
	}
	hasReq struct {
		UserId      bool
		PlatId      bool
		Page        bool
		Size        bool
		IsNeedTotal bool
		Match       bool
	}
}

func NewGetUserRecvFriendApplyPageLogicGen(ctx context.Context, svc *svc.ServiceContext) *GetUserRecvFriendApplyPageLogicGen {
	meta, _ := ctx.Value("reqMeta").(*typed.ReqMeta)
	if meta == nil {
		meta = &typed.ReqMeta{}
	}
	return &GetUserRecvFriendApplyPageLogicGen{
		ctx:    ctx,
		svc:    svc,
		Logger: logx.WithContext(ctx),
		resd:   resd.NewResp(ctx, meta.Lang),
		meta:   meta,
	}
}

func (l *GetUserRecvFriendApplyPageLogicGen) initReq(in *socialRpc.GetUserRecvFriendApplyPageReq) error {

	if in.UserId != nil {
		l.req.UserId = *in.UserId
		l.hasReq.UserId = true
	} else {
		l.hasReq.UserId = false
	}

	if in.PlatId != nil {
		l.req.PlatId = *in.PlatId
		l.hasReq.PlatId = true
	} else {
		l.hasReq.PlatId = false
	}

	if in.Page != nil {
		l.req.Page = *in.Page
		l.hasReq.Page = true
	} else {
		l.hasReq.Page = false
	}

	if in.Size != nil {
		l.req.Size = *in.Size
		l.hasReq.Size = true
	} else {
		l.hasReq.Size = false
	}

	if in.IsNeedTotal != nil {
		l.req.IsNeedTotal = *in.IsNeedTotal
		l.hasReq.IsNeedTotal = true
	} else {
		l.hasReq.IsNeedTotal = false
	}

	if in.Match != nil {
		l.req.Match = in.Match
		l.hasReq.Match = true
	} else {
		l.hasReq.Match = false
	}

	return nil
}
