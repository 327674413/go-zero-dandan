// Code generated by goctl. DO NOT EDIT.
package logic

import (
	"context"
	"go-zero-dandan/app/social/rpc/internal/svc"
	"go-zero-dandan/app/social/rpc/types/socialRpc"
	"go-zero-dandan/common/resd"
	"go-zero-dandan/common/typed"

	"github.com/zeromicro/go-zero/core/logx"
)

type CreateGroupLogicGen struct {
	ctx  context.Context
	svc  *svc.ServiceContext
	resd *resd.Resp
	meta *typed.ReqMeta
	logx.Logger
	req struct {
		Name      string
		Status    int64
		CreateUid string
		PlatId    string
	}
	hasReq struct {
		Name      bool
		Status    bool
		CreateUid bool
		PlatId    bool
	}
}

func NewCreateGroupLogicGen(ctx context.Context, svc *svc.ServiceContext) *CreateGroupLogicGen {
	meta, _ := ctx.Value("reqMeta").(*typed.ReqMeta)
	if meta == nil {
		meta = &typed.ReqMeta{}
	}
	return &CreateGroupLogicGen{
		ctx:    ctx,
		svc:    svc,
		Logger: logx.WithContext(ctx),
		resd:   resd.NewResp(ctx, meta.Lang),
		meta:   meta,
	}
}

func (l *CreateGroupLogicGen) initReq(req *socialRpc.CreateGroupReq) error {

	if req.Name != nil {
		l.req.Name = *req.Name
		l.hasReq.Name = true
	} else {
		l.hasReq.Name = false
	}

	if req.Status != nil {
		l.req.Status = *req.Status
		l.hasReq.Status = true
	} else {
		l.hasReq.Status = false
	}

	if req.CreateUid != nil {
		l.req.CreateUid = *req.CreateUid
		l.hasReq.CreateUid = true
	} else {
		l.hasReq.CreateUid = false
	}

	if req.PlatId != nil {
		l.req.PlatId = *req.PlatId
		l.hasReq.PlatId = true
	} else {
		l.hasReq.PlatId = false
	}

	return nil
}
