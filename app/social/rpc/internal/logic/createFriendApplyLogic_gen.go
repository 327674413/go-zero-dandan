// Code generated by goctl. DO NOT EDIT.
package logic

import (
	"context"
	"go-zero-dandan/app/social/rpc/internal/svc"
	"go-zero-dandan/app/social/rpc/types/socialRpc"
	"go-zero-dandan/common/resd"
	"go-zero-dandan/common/typed"

	"github.com/zeromicro/go-zero/core/logx"
)

type CreateFriendApplyLogicGen struct {
	ctx  context.Context
	svc  *svc.ServiceContext
	resd *resd.Resp
	meta *typed.ReqMeta
	logx.Logger
	req struct {
		PlatId    string
		UserId    string
		FriendUid string `check:"required"`
		ApplyMsg  string
		ApplyAt   int64
		SourceEm  int64
	}
	hasReq struct {
		PlatId    bool
		UserId    bool
		FriendUid bool
		ApplyMsg  bool
		ApplyAt   bool
		SourceEm  bool
	}
}

func NewCreateFriendApplyLogicGen(ctx context.Context, svc *svc.ServiceContext) *CreateFriendApplyLogicGen {
	meta, _ := ctx.Value("reqMeta").(*typed.ReqMeta)
	if meta == nil {
		meta = &typed.ReqMeta{}
	}
	return &CreateFriendApplyLogicGen{
		ctx:    ctx,
		svc:    svc,
		Logger: logx.WithContext(ctx),
		resd:   resd.NewResp(ctx, meta.Lang),
		meta:   meta,
	}
}

func (l *CreateFriendApplyLogicGen) initReq(in *socialRpc.CreateFriendApplyReq) error {

	if in.PlatId != nil {
		l.req.PlatId = *in.PlatId
		l.hasReq.PlatId = true
	} else {
		l.hasReq.PlatId = false
	}

	if in.UserId != nil {
		l.req.UserId = *in.UserId
		l.hasReq.UserId = true
	} else {
		l.hasReq.UserId = false
	}

	if in.FriendUid != nil {
		l.req.FriendUid = *in.FriendUid
		l.hasReq.FriendUid = true
	} else {
		l.hasReq.FriendUid = false
	}

	if l.hasReq.FriendUid == false {
		return l.resd.NewErrWithTemp(resd.ErrReqFieldRequired1, "FriendUid")
	}

	if l.req.FriendUid == "" {
		return l.resd.NewErrWithTemp(resd.ErrReqFieldEmpty1, "FriendUid")
	}

	if in.ApplyMsg != nil {
		l.req.ApplyMsg = *in.ApplyMsg
		l.hasReq.ApplyMsg = true
	} else {
		l.hasReq.ApplyMsg = false
	}

	if in.ApplyAt != nil {
		l.req.ApplyAt = *in.ApplyAt
		l.hasReq.ApplyAt = true
	} else {
		l.hasReq.ApplyAt = false
	}

	if in.SourceEm != nil {
		l.req.SourceEm = *in.SourceEm
		l.hasReq.SourceEm = true
	} else {
		l.hasReq.SourceEm = false
	}

	return nil
}
