// Code generated by goctl. DO NOT EDIT.
package logic

import (
	"context"
	"go-zero-dandan/app/social/rpc/internal/svc"
	"go-zero-dandan/app/social/rpc/types/socialRpc"
	"go-zero-dandan/common/resd"
	"go-zero-dandan/common/typed"

	"github.com/zeromicro/go-zero/core/logx"
)

type GetUserRelationLogicGen struct {
	ctx  context.Context
	svc  *svc.ServiceContext
	resd *resd.Resp
	meta *typed.ReqMeta
	logx.Logger
	req struct {
		PlatId     string
		UserId     string
		FriendUids []string
	}
	hasReq struct {
		PlatId     bool
		UserId     bool
		FriendUids bool
	}
}

func NewGetUserRelationLogicGen(ctx context.Context, svc *svc.ServiceContext) *GetUserRelationLogicGen {
	meta, _ := ctx.Value("reqMeta").(*typed.ReqMeta)
	if meta == nil {
		meta = &typed.ReqMeta{}
	}
	return &GetUserRelationLogicGen{
		ctx:    ctx,
		svc:    svc,
		Logger: logx.WithContext(ctx),
		resd:   resd.NewResp(ctx, meta.Lang),
		meta:   meta,
	}
}

func (l *GetUserRelationLogicGen) initReq(in *socialRpc.GetUserRelationReq) error {

	if in.PlatId != nil {
		l.req.PlatId = *in.PlatId
		l.hasReq.PlatId = true
	} else {
		l.hasReq.PlatId = false
	}

	if in.UserId != nil {
		l.req.UserId = *in.UserId
		l.hasReq.UserId = true
	} else {
		l.hasReq.UserId = false
	}

	if in.FriendUids != nil {
		l.req.FriendUids = in.FriendUids
		l.hasReq.FriendUids = true
	} else {
		l.hasReq.FriendUids = false
	}

	return nil
}
