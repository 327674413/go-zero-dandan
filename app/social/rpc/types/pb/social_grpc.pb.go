// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: social.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Social_CreateFriendApply_FullMethodName           = "/social.social/CreateFriendApply"
	Social_OperateFriendApply_FullMethodName          = "/social.social/OperateFriendApply"
	Social_GetUserFriendApplyPage_FullMethodName      = "/social.social/GetUserFriendApplyPage"
	Social_GetUserFriendList_FullMethodName           = "/social.social/GetUserFriendList"
	Social_GetFriendOnline_FullMethodName             = "/social.social/GetFriendOnline"
	Social_GetUserRelation_FullMethodName             = "/social.social/GetUserRelation"
	Social_CreateGroup_FullMethodName                 = "/social.social/CreateGroup"
	Social_CreateGroupMemberApply_FullMethodName      = "/social.social/CreateGroupMemberApply"
	Social_GetUserGroupMemberApplyList_FullMethodName = "/social.social/GetUserGroupMemberApplyList"
	Social_OperateGroupMemberApply_FullMethodName     = "/social.social/OperateGroupMemberApply"
	Social_GetUserGroupList_FullMethodName            = "/social.social/GetUserGroupList"
	Social_GetGroupMemberList_FullMethodName          = "/social.social/GetGroupMemberList"
	Social_GetGroupUserOnline_FullMethodName          = "/social.social/GetGroupUserOnline"
)

// SocialClient is the client API for Social service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialClient interface {
	CreateFriendApply(ctx context.Context, in *CreateFriendApplyReq, opts ...grpc.CallOption) (*CreateFriendApplyResp, error)
	OperateFriendApply(ctx context.Context, in *OperateFriendApplyReq, opts ...grpc.CallOption) (*ResultResp, error)
	GetUserFriendApplyPage(ctx context.Context, in *GetUserFriendApplyPageReq, opts ...grpc.CallOption) (*FriendApplyPageResp, error)
	GetUserFriendList(ctx context.Context, in *GetUserFriendListReq, opts ...grpc.CallOption) (*FriendListResp, error)
	GetFriendOnline(ctx context.Context, in *GetFriendOnlineReq, opts ...grpc.CallOption) (*FriendOnlineResp, error)
	GetUserRelation(ctx context.Context, in *GetUserRelationReq, opts ...grpc.CallOption) (*GetUserRelationResp, error)
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
	CreateGroupMemberApply(ctx context.Context, in *CreateGroupMemberApplyReq, opts ...grpc.CallOption) (*CreateGroupMemberApplyResp, error)
	GetUserGroupMemberApplyList(ctx context.Context, in *GetUserGroupMemberApplyListReq, opts ...grpc.CallOption) (*GroupMemberApplyListResp, error)
	OperateGroupMemberApply(ctx context.Context, in *OperateGroupMemberApplyReq, opts ...grpc.CallOption) (*ResultResp, error)
	GetUserGroupList(ctx context.Context, in *GetUserGroupListReq, opts ...grpc.CallOption) (*GroupListResp, error)
	GetGroupMemberList(ctx context.Context, in *GetGroupMemberListReq, opts ...grpc.CallOption) (*GroupMemberListResp, error)
	GetGroupUserOnline(ctx context.Context, in *GetGroupUserOnlineReq, opts ...grpc.CallOption) (*GroupUserOnlineResp, error)
}

type socialClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialClient(cc grpc.ClientConnInterface) SocialClient {
	return &socialClient{cc}
}

func (c *socialClient) CreateFriendApply(ctx context.Context, in *CreateFriendApplyReq, opts ...grpc.CallOption) (*CreateFriendApplyResp, error) {
	out := new(CreateFriendApplyResp)
	err := c.cc.Invoke(ctx, Social_CreateFriendApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) OperateFriendApply(ctx context.Context, in *OperateFriendApplyReq, opts ...grpc.CallOption) (*ResultResp, error) {
	out := new(ResultResp)
	err := c.cc.Invoke(ctx, Social_OperateFriendApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetUserFriendApplyPage(ctx context.Context, in *GetUserFriendApplyPageReq, opts ...grpc.CallOption) (*FriendApplyPageResp, error) {
	out := new(FriendApplyPageResp)
	err := c.cc.Invoke(ctx, Social_GetUserFriendApplyPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetUserFriendList(ctx context.Context, in *GetUserFriendListReq, opts ...grpc.CallOption) (*FriendListResp, error) {
	out := new(FriendListResp)
	err := c.cc.Invoke(ctx, Social_GetUserFriendList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetFriendOnline(ctx context.Context, in *GetFriendOnlineReq, opts ...grpc.CallOption) (*FriendOnlineResp, error) {
	out := new(FriendOnlineResp)
	err := c.cc.Invoke(ctx, Social_GetFriendOnline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetUserRelation(ctx context.Context, in *GetUserRelationReq, opts ...grpc.CallOption) (*GetUserRelationResp, error) {
	out := new(GetUserRelationResp)
	err := c.cc.Invoke(ctx, Social_GetUserRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	out := new(CreateGroupResp)
	err := c.cc.Invoke(ctx, Social_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) CreateGroupMemberApply(ctx context.Context, in *CreateGroupMemberApplyReq, opts ...grpc.CallOption) (*CreateGroupMemberApplyResp, error) {
	out := new(CreateGroupMemberApplyResp)
	err := c.cc.Invoke(ctx, Social_CreateGroupMemberApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetUserGroupMemberApplyList(ctx context.Context, in *GetUserGroupMemberApplyListReq, opts ...grpc.CallOption) (*GroupMemberApplyListResp, error) {
	out := new(GroupMemberApplyListResp)
	err := c.cc.Invoke(ctx, Social_GetUserGroupMemberApplyList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) OperateGroupMemberApply(ctx context.Context, in *OperateGroupMemberApplyReq, opts ...grpc.CallOption) (*ResultResp, error) {
	out := new(ResultResp)
	err := c.cc.Invoke(ctx, Social_OperateGroupMemberApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetUserGroupList(ctx context.Context, in *GetUserGroupListReq, opts ...grpc.CallOption) (*GroupListResp, error) {
	out := new(GroupListResp)
	err := c.cc.Invoke(ctx, Social_GetUserGroupList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetGroupMemberList(ctx context.Context, in *GetGroupMemberListReq, opts ...grpc.CallOption) (*GroupMemberListResp, error) {
	out := new(GroupMemberListResp)
	err := c.cc.Invoke(ctx, Social_GetGroupMemberList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetGroupUserOnline(ctx context.Context, in *GetGroupUserOnlineReq, opts ...grpc.CallOption) (*GroupUserOnlineResp, error) {
	out := new(GroupUserOnlineResp)
	err := c.cc.Invoke(ctx, Social_GetGroupUserOnline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialServer is the server API for Social service.
// All implementations must embed UnimplementedSocialServer
// for forward compatibility
type SocialServer interface {
	CreateFriendApply(context.Context, *CreateFriendApplyReq) (*CreateFriendApplyResp, error)
	OperateFriendApply(context.Context, *OperateFriendApplyReq) (*ResultResp, error)
	GetUserFriendApplyPage(context.Context, *GetUserFriendApplyPageReq) (*FriendApplyPageResp, error)
	GetUserFriendList(context.Context, *GetUserFriendListReq) (*FriendListResp, error)
	GetFriendOnline(context.Context, *GetFriendOnlineReq) (*FriendOnlineResp, error)
	GetUserRelation(context.Context, *GetUserRelationReq) (*GetUserRelationResp, error)
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
	CreateGroupMemberApply(context.Context, *CreateGroupMemberApplyReq) (*CreateGroupMemberApplyResp, error)
	GetUserGroupMemberApplyList(context.Context, *GetUserGroupMemberApplyListReq) (*GroupMemberApplyListResp, error)
	OperateGroupMemberApply(context.Context, *OperateGroupMemberApplyReq) (*ResultResp, error)
	GetUserGroupList(context.Context, *GetUserGroupListReq) (*GroupListResp, error)
	GetGroupMemberList(context.Context, *GetGroupMemberListReq) (*GroupMemberListResp, error)
	GetGroupUserOnline(context.Context, *GetGroupUserOnlineReq) (*GroupUserOnlineResp, error)
	mustEmbedUnimplementedSocialServer()
}

// UnimplementedSocialServer must be embedded to have forward compatible implementations.
type UnimplementedSocialServer struct {
}

func (UnimplementedSocialServer) CreateFriendApply(context.Context, *CreateFriendApplyReq) (*CreateFriendApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFriendApply not implemented")
}
func (UnimplementedSocialServer) OperateFriendApply(context.Context, *OperateFriendApplyReq) (*ResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateFriendApply not implemented")
}
func (UnimplementedSocialServer) GetUserFriendApplyPage(context.Context, *GetUserFriendApplyPageReq) (*FriendApplyPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFriendApplyPage not implemented")
}
func (UnimplementedSocialServer) GetUserFriendList(context.Context, *GetUserFriendListReq) (*FriendListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFriendList not implemented")
}
func (UnimplementedSocialServer) GetFriendOnline(context.Context, *GetFriendOnlineReq) (*FriendOnlineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendOnline not implemented")
}
func (UnimplementedSocialServer) GetUserRelation(context.Context, *GetUserRelationReq) (*GetUserRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRelation not implemented")
}
func (UnimplementedSocialServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedSocialServer) CreateGroupMemberApply(context.Context, *CreateGroupMemberApplyReq) (*CreateGroupMemberApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupMemberApply not implemented")
}
func (UnimplementedSocialServer) GetUserGroupMemberApplyList(context.Context, *GetUserGroupMemberApplyListReq) (*GroupMemberApplyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroupMemberApplyList not implemented")
}
func (UnimplementedSocialServer) OperateGroupMemberApply(context.Context, *OperateGroupMemberApplyReq) (*ResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateGroupMemberApply not implemented")
}
func (UnimplementedSocialServer) GetUserGroupList(context.Context, *GetUserGroupListReq) (*GroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroupList not implemented")
}
func (UnimplementedSocialServer) GetGroupMemberList(context.Context, *GetGroupMemberListReq) (*GroupMemberListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMemberList not implemented")
}
func (UnimplementedSocialServer) GetGroupUserOnline(context.Context, *GetGroupUserOnlineReq) (*GroupUserOnlineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupUserOnline not implemented")
}
func (UnimplementedSocialServer) mustEmbedUnimplementedSocialServer() {}

// UnsafeSocialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialServer will
// result in compilation errors.
type UnsafeSocialServer interface {
	mustEmbedUnimplementedSocialServer()
}

func RegisterSocialServer(s grpc.ServiceRegistrar, srv SocialServer) {
	s.RegisterService(&Social_ServiceDesc, srv)
}

func _Social_CreateFriendApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFriendApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).CreateFriendApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_CreateFriendApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).CreateFriendApply(ctx, req.(*CreateFriendApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_OperateFriendApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateFriendApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).OperateFriendApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_OperateFriendApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).OperateFriendApply(ctx, req.(*OperateFriendApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetUserFriendApplyPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFriendApplyPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetUserFriendApplyPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetUserFriendApplyPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetUserFriendApplyPage(ctx, req.(*GetUserFriendApplyPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetUserFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFriendListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetUserFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetUserFriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetUserFriendList(ctx, req.(*GetUserFriendListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetFriendOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendOnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetFriendOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetFriendOnline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetFriendOnline(ctx, req.(*GetFriendOnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetUserRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetUserRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetUserRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetUserRelation(ctx, req.(*GetUserRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_CreateGroupMemberApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupMemberApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).CreateGroupMemberApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_CreateGroupMemberApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).CreateGroupMemberApply(ctx, req.(*CreateGroupMemberApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetUserGroupMemberApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGroupMemberApplyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetUserGroupMemberApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetUserGroupMemberApplyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetUserGroupMemberApplyList(ctx, req.(*GetUserGroupMemberApplyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_OperateGroupMemberApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateGroupMemberApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).OperateGroupMemberApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_OperateGroupMemberApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).OperateGroupMemberApply(ctx, req.(*OperateGroupMemberApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetUserGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetUserGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetUserGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetUserGroupList(ctx, req.(*GetUserGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetGroupMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetGroupMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetGroupMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetGroupMemberList(ctx, req.(*GetGroupMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetGroupUserOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupUserOnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetGroupUserOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetGroupUserOnline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetGroupUserOnline(ctx, req.(*GetGroupUserOnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Social_ServiceDesc is the grpc.ServiceDesc for Social service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Social_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "social.social",
	HandlerType: (*SocialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFriendApply",
			Handler:    _Social_CreateFriendApply_Handler,
		},
		{
			MethodName: "OperateFriendApply",
			Handler:    _Social_OperateFriendApply_Handler,
		},
		{
			MethodName: "GetUserFriendApplyPage",
			Handler:    _Social_GetUserFriendApplyPage_Handler,
		},
		{
			MethodName: "GetUserFriendList",
			Handler:    _Social_GetUserFriendList_Handler,
		},
		{
			MethodName: "GetFriendOnline",
			Handler:    _Social_GetFriendOnline_Handler,
		},
		{
			MethodName: "GetUserRelation",
			Handler:    _Social_GetUserRelation_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Social_CreateGroup_Handler,
		},
		{
			MethodName: "CreateGroupMemberApply",
			Handler:    _Social_CreateGroupMemberApply_Handler,
		},
		{
			MethodName: "GetUserGroupMemberApplyList",
			Handler:    _Social_GetUserGroupMemberApplyList_Handler,
		},
		{
			MethodName: "OperateGroupMemberApply",
			Handler:    _Social_OperateGroupMemberApply_Handler,
		},
		{
			MethodName: "GetUserGroupList",
			Handler:    _Social_GetUserGroupList_Handler,
		},
		{
			MethodName: "GetGroupMemberList",
			Handler:    _Social_GetGroupMemberList_Handler,
		},
		{
			MethodName: "GetGroupUserOnline",
			Handler:    _Social_GetGroupUserOnline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "social.proto",
}
