// Code generated by goctl. DO NOT EDIT.
syntax = "proto3";
	
option go_package = "./socialRpc";

package social;

message EmptyReq{}
message MatchField {
	 string type = 1;
	 string str = 2;
	 string strs = 3;
	 int64 num = 4;
	repeated int64 nums = 5;
	 bool isFuzzy = 6;
	repeated string raws = 7;
}
message GetUserRelationReq {
	optional string platId = 1;
	optional string userId = 2;
	repeated string friendUids = 3;
}
message GetUserRelationResp {
	 map<string, int64> relats = 1;
}
message FriendInfo {
	 string id = 1;
	 string userId = 2;
	 string friendRemark = 3;
	 int64 sourceEm = 4;
	 string friendUid = 5;
	 string platId = 6;
	 string friendName = 7;
	 string friendAlias = 8;
	 string friendIcon = 9;
	 int64 friendSexEm = 10;
}
message FriendApply {
	 string id = 1;
	 string userId = 2;
	 string friendUid = 3;
	 string applyLastMsg = 4;
	 int64 applyLastAt = 5;
	 string operateMsg = 6;
	 int64 operateAt = 7;
	 int64 stateEm = 8;
	 string platId = 9;
	 string friendName = 10;
	 string friendAvatarImg = 11;
	 int64 friendSex = 12;
	 string userName = 13;
	 string userAvatarImg = 14;
	 int64 userSex = 15;
}
message GroupInfo {
	 string id = 1;
	 string name = 2;
	 int64 stateEm = 3;
	 int64 typeEm = 4;
	 string createUid = 5;
	 int64 isVerify = 6;
	 string notiContent = 7;
	 string notiUid = 8;
	 string platId = 9;
	 string code = 10;
}
message GroupMember {
	 string id = 1;
	 string groupId = 2;
	 string userId = 3;
	 int64 roleLevel = 4;
	 int64 joinAt = 5;
	 int64 joinSourceEm = 6;
	 string inviteUid = 7;
	 string operateUid = 8;
	 string platId = 9;
}
message GroupMemberApply {
	 string id = 1;
	 string groupId = 2;
	 string userId = 3;
	 string applyMsg = 4;
	 int64 applyAt = 5;
	 int64 joinSourceEm = 6;
	 string inviteUid = 7;
	 string operateUid = 8;
	 int64 operateStateEm = 9;
	 int64 operateAt = 10;
	 string platId = 11;
	 string operateMsg = 12;
}
message ResultResp {
	 bool result = 1;
	 string msg = 2;
}
message CreateFriendApplyReq {
	optional string platId = 1;
	optional string userId = 2;
	optional string friendUid = 3;
	optional string applyMsg = 4;
	optional int64 applyAt = 5;
	optional int64 sourceEm = 6;
}
message CreateFriendApplyResp {
	 string applyId = 1;
}
message OperateFriendApplyReq {
	optional string applyId = 1;
	optional string operateUid = 2;
	optional int64 operateStateEm = 3;
	optional string platId = 4;
	optional string operateMsg = 5;
	optional string sysRoleEm = 6;
	optional string sysRoleUid = 7;
}
message GetUserRecvFriendApplyPageReq {
	optional string userId = 1;
	optional string platId = 2;
	optional int64 page = 3;
	optional int64 size = 4;
	optional int64 isNeedTotal = 5;
	 map<string, MatchField> match = 6;
}
message FriendApplyPageResp {
	repeated FriendApply list = 1;
	 int64 total = 2;
}
message GetUserFriendListReq {
	optional string userId = 1;
	optional string platId = 2;
}
message FriendListResp {
	repeated FriendInfo list = 1;
}
message GetFriendOnlineReq {
	optional string userId = 1;
	optional string platId = 2;
}
message FriendOnlineResp {
	 map<string, bool> onlineUser = 1;
}
message GetGroupUserOnlineReq {
	optional string groupId = 1;
	optional string platId = 2;
}
message GroupUserOnlineResp {
	 map<string, bool> onlineUser = 1;
}
message CreateGroupReq {
	optional string name = 1;
	optional int64 status = 2;
	optional string createUid = 3;
	optional string platId = 4;
}
message CreateGroupResp {
	 string id = 1;
}
message CreateGroupMemberApplyReq {
	optional string platId = 1;
	optional string groupId = 2;
	optional string applyMsg = 3;
	optional int64 joinSourceEm = 4;
	optional string inviteUid = 5;
}
message CreateGroupMemberApplyResp {
	 string applyId = 1;
}
message GetUserGroupMemberApplyListReq {
	optional string userId = 1;
	optional string platId = 2;
}
message GroupMemberApplyListResp {
	repeated GroupMemberApply list = 1;
}
message OperateGroupMemberApplyReq {
	optional string applyId = 1;
	optional string groupId = 2;
	optional string operateUid = 3;
	optional int64 operateStateEm = 4;
	optional string platId = 5;
	optional string operateMsg = 6;
}
message GetUserGroupListReq {
	optional string userId = 1;
	optional string platId = 2;
}
message GroupListResp {
	repeated GroupInfo list = 1;
}
message GetGroupMemberListReq {
	optional string groupId = 1;
	optional string platId = 2;
}
message GroupMemberListResp {
	repeated GroupMember list = 1;
}

	
service social {
	rpc CreateFriendApply(CreateFriendApplyReq) returns (CreateFriendApplyResp);
	rpc OperateFriendApply(OperateFriendApplyReq) returns (ResultResp);
	rpc GetUserRecvFriendApplyPage(GetUserRecvFriendApplyPageReq) returns (FriendApplyPageResp);
	rpc GetUserFriendList(GetUserFriendListReq) returns (FriendListResp);
	rpc GetFriendOnline(GetFriendOnlineReq) returns (FriendOnlineResp);
	rpc GetUserRelation(GetUserRelationReq) returns (GetUserRelationResp);
	rpc CreateGroup(CreateGroupReq) returns (CreateGroupResp);
	rpc CreateGroupMemberApply(CreateGroupMemberApplyReq) returns (CreateGroupMemberApplyResp);
	rpc GetUserGroupMemberApplyList(GetUserGroupMemberApplyListReq) returns (GroupMemberApplyListResp);
	rpc OperateGroupMemberApply(OperateGroupMemberApplyReq) returns (ResultResp);
	rpc GetUserGroupList(GetUserGroupListReq) returns (GroupListResp);
	rpc GetGroupMemberList(GetGroupMemberListReq) returns (GroupMemberListResp);
	rpc GetGroupUserOnline(GetGroupUserOnlineReq) returns (GroupUserOnlineResp);
}

