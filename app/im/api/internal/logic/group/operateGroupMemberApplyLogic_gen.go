// Code generated by goctl. DO NOT EDIT.
package group

import (
	"context"

	"go-zero-dandan/app/im/api/internal/svc"
	"go-zero-dandan/app/im/api/internal/types"

	"github.com/zeromicro/go-zero/core/logx"
	"go-zero-dandan/common/resd"
	"go-zero-dandan/common/typed"
	"strings"
)

type OperateGroupMemberApplyLogicGen struct {
	logx.Logger
	ctx          context.Context
	svc          *svc.ServiceContext
	resd         *resd.Resp
	meta         *typed.ReqMeta
	hasUserInfo  bool
	mustUserInfo bool
	req          struct {
		ApplyId        string `json:"applyId,optional"`
		OpreateStateEm int64  `json:"operateStateEm,optional"`
		OpreateMsg     string `json:"operateMsg,optional"`
	}
	hasReq struct {
		ApplyId        bool
		OpreateStateEm bool
		OpreateMsg     bool
	}
}

func NewOperateGroupMemberApplyLogicGen(ctx context.Context, svc *svc.ServiceContext) *OperateGroupMemberApplyLogicGen {
	meta, _ := ctx.Value("reqMeta").(*typed.ReqMeta)
	if meta == nil {
		meta = &typed.ReqMeta{}
	}
	return &OperateGroupMemberApplyLogicGen{
		Logger: logx.WithContext(ctx),
		ctx:    ctx,
		svc:    svc,
		resd:   resd.NewResp(ctx, meta.Lang),
		meta:   meta,
	}
}

func (l *OperateGroupMemberApplyLogicGen) initReq(in *types.OperateGroupMemberApplyReq) error {

	if in.ApplyId != nil {
		l.req.ApplyId = strings.TrimSpace(*in.ApplyId)
		l.hasReq.ApplyId = true
	} else {
		l.hasReq.ApplyId = false
	}

	if in.OpreateStateEm != nil {
		l.req.OpreateStateEm = *in.OpreateStateEm
		l.hasReq.OpreateStateEm = true
	} else {
		l.hasReq.OpreateStateEm = false
	}

	if in.OpreateMsg != nil {
		l.req.OpreateMsg = strings.TrimSpace(*in.OpreateMsg)
		l.hasReq.OpreateMsg = true
	} else {
		l.hasReq.OpreateMsg = false
	}
	l.hasUserInfo = true
	l.mustUserInfo = true

	return nil
}
