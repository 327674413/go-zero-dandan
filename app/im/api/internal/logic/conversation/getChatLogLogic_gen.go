// Code generated by goctl. DO NOT EDIT.
package conversation

import (
	"context"

	"go-zero-dandan/app/im/api/internal/svc"
	"go-zero-dandan/app/im/api/internal/types"

	"github.com/zeromicro/go-zero/core/logx"
	"go-zero-dandan/common/resd"
	"go-zero-dandan/common/typed"
	"strings"
)

type GetChatLogLogicGen struct {
	logx.Logger
	ctx          context.Context
	svc          *svc.ServiceContext
	resd         *resd.Resp
	meta         *typed.ReqMeta
	hasUserInfo  bool
	mustUserInfo bool
	req          struct {
		ConversationId string `json:"conversationId,optional"`
		StartSendAt    int64  `json:"startSendTime,optional"`
		EndSendAt      int64  `json:"endSendTime,optional"`
		Count          int64  `json:"count,optional"`
	}
	hasReq struct {
		ConversationId bool
		StartSendAt    bool
		EndSendAt      bool
		Count          bool
	}
}

func NewGetChatLogLogicGen(ctx context.Context, svc *svc.ServiceContext) *GetChatLogLogicGen {
	meta, _ := ctx.Value("reqMeta").(*typed.ReqMeta)
	if meta == nil {
		meta = &typed.ReqMeta{}
	}
	return &GetChatLogLogicGen{
		Logger: logx.WithContext(ctx),
		ctx:    ctx,
		svc:    svc,
		resd:   resd.NewResp(ctx, meta.Lang),
		meta:   meta,
	}
}

func (l *GetChatLogLogicGen) initReq(in *types.GetChatLogReq) error {

	if in.ConversationId != nil {
		l.req.ConversationId = strings.TrimSpace(*in.ConversationId)
		l.hasReq.ConversationId = true
	} else {
		l.hasReq.ConversationId = false
	}

	if l.hasReq.ConversationId == false {
		return resd.NewErrWithTempCtx(l.ctx, "缺少参数ConversationId", resd.ErrReqFieldRequired1, "ConversationId")
	}

	if l.req.ConversationId == "" {
		return resd.NewErrWithTempCtx(l.ctx, "ConversationId不得为空", resd.ErrReqFieldEmpty1, "ConversationId")
	}

	if in.StartSendAt != nil {
		l.req.StartSendAt = *in.StartSendAt
		l.hasReq.StartSendAt = true
	} else {
		l.hasReq.StartSendAt = false
	}

	if in.EndSendAt != nil {
		l.req.EndSendAt = *in.EndSendAt
		l.hasReq.EndSendAt = true
	} else {
		l.hasReq.EndSendAt = false
	}

	if in.Count != nil {
		l.req.Count = *in.Count
		l.hasReq.Count = true
	} else {
		l.hasReq.Count = false
	}
	l.hasUserInfo = true
	l.mustUserInfo = true

	return nil
}
