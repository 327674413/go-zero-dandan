// Code generated by goctl. DO NOT EDIT.
syntax = "proto3";
	
option go_package = "./imRpc";

package im;

message EmptyReq{}
message ChatLog {
	 string id = 1;
	 string conversationId = 2;
	 string sendId = 3;
	 string recvId = 4;
	 int64 msgType = 5;
	 string msgContent = 6;
	 int64 chatType = 7;
	 string sendTime = 8;
	 bytes readRecords = 9;
}
message Conversation {
	 string conversationId = 1;
	 int64 chatType = 2;
	 string targetId = 3;
	 bool isShow = 4;
	 int64 seq = 5;
	 int64 total = 6;
	 int64 toRead = 7;
	 int64 read = 8;
	 ChatLog msg = 9;
}
message GetConversationsReq {
	optional string userId = 1;
}
message GetConversationsResp {
	 map<string, Conversation> conversationList = 1;
}
message SendSysMsgReq {
	optional string userId = 1;
	optional int64 msgTypeEm = 2;
	optional string msgContent = 3;
	optional string sendTime = 4;
	optional int64 msgClasEm = 5;
}
message PutConversationsReq {
	optional string id = 1;
	optional string userId = 2;
	 map<string, Conversation> conversationList = 3;
}
message PutConversationsResp {
}
message GetChatLogReq {
	optional string conversationId = 1;
	optional int64 startSendTime = 2;
	optional int64 endSendTime = 3;
	optional int64 count = 4;
	optional string msgId = 5;
}
message GetChatLogResp {
	repeated ChatLog list = 1;
}
message SetUpUserConversationReq {
	optional string sendId = 1;
	optional string recvId = 2;
	optional int64 chatType = 3;
}
message SetUpUserConversationResp {
}
message CreateGroupConversationReq {
	optional string groupId = 1;
	optional string createId = 2;
}
message CreateGroupConversationResp {
}
message ResultResp {
	 int64 code = 1;
	 string content = 2;
}

	
service im {
	rpc GetChatLog(GetChatLogReq) returns (GetChatLogResp);
	rpc SetUpUserConversation(SetUpUserConversationReq) returns (SetUpUserConversationResp);
	rpc GetConversations(GetConversationsReq) returns (GetConversationsResp);
	rpc PutConversations(PutConversationsReq) returns (PutConversationsResp);
	rpc CreateGroupConversation(CreateGroupConversationReq) returns (CreateGroupConversationResp);
	rpc SendSysMsg(SendSysMsgReq) returns (ResultResp);
}

