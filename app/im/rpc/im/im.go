// Code generated by goctl. DO NOT EDIT.
// Source: im.proto

package im

import (
	"context"

	"go-zero-dandan/app/im/rpc/types/imRpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChatLog                     = imRpc.ChatLog
	Conversation                = imRpc.Conversation
	CreateGroupConversationReq  = imRpc.CreateGroupConversationReq
	CreateGroupConversationResp = imRpc.CreateGroupConversationResp
	EmptyReq                    = imRpc.EmptyReq
	GetChatLogReq               = imRpc.GetChatLogReq
	GetChatLogResp              = imRpc.GetChatLogResp
	GetConversationsReq         = imRpc.GetConversationsReq
	GetConversationsResp        = imRpc.GetConversationsResp
	PutConversationsReq         = imRpc.PutConversationsReq
	PutConversationsResp        = imRpc.PutConversationsResp
	ResultResp                  = imRpc.ResultResp
	SendSysMsgReq               = imRpc.SendSysMsgReq
	SetUpUserConversationReq    = imRpc.SetUpUserConversationReq
	SetUpUserConversationResp   = imRpc.SetUpUserConversationResp

	Im interface {
		GetChatLog(ctx context.Context, in *GetChatLogReq, opts ...grpc.CallOption) (*GetChatLogResp, error)
		SetUpUserConversation(ctx context.Context, in *SetUpUserConversationReq, opts ...grpc.CallOption) (*SetUpUserConversationResp, error)
		GetConversations(ctx context.Context, in *GetConversationsReq, opts ...grpc.CallOption) (*GetConversationsResp, error)
		PutConversations(ctx context.Context, in *PutConversationsReq, opts ...grpc.CallOption) (*PutConversationsResp, error)
		CreateGroupConversation(ctx context.Context, in *CreateGroupConversationReq, opts ...grpc.CallOption) (*CreateGroupConversationResp, error)
		SendSysMsg(ctx context.Context, in *SendSysMsgReq, opts ...grpc.CallOption) (*ResultResp, error)
	}

	defaultIm struct {
		cli zrpc.Client
	}
)

func NewIm(cli zrpc.Client) Im {
	return &defaultIm{
		cli: cli,
	}
}

func (m *defaultIm) GetChatLog(ctx context.Context, in *GetChatLogReq, opts ...grpc.CallOption) (*GetChatLogResp, error) {
	client := imRpc.NewImClient(m.cli.Conn())
	return client.GetChatLog(ctx, in, opts...)
}

func (m *defaultIm) SetUpUserConversation(ctx context.Context, in *SetUpUserConversationReq, opts ...grpc.CallOption) (*SetUpUserConversationResp, error) {
	client := imRpc.NewImClient(m.cli.Conn())
	return client.SetUpUserConversation(ctx, in, opts...)
}

func (m *defaultIm) GetConversations(ctx context.Context, in *GetConversationsReq, opts ...grpc.CallOption) (*GetConversationsResp, error) {
	client := imRpc.NewImClient(m.cli.Conn())
	return client.GetConversations(ctx, in, opts...)
}

func (m *defaultIm) PutConversations(ctx context.Context, in *PutConversationsReq, opts ...grpc.CallOption) (*PutConversationsResp, error) {
	client := imRpc.NewImClient(m.cli.Conn())
	return client.PutConversations(ctx, in, opts...)
}

func (m *defaultIm) CreateGroupConversation(ctx context.Context, in *CreateGroupConversationReq, opts ...grpc.CallOption) (*CreateGroupConversationResp, error) {
	client := imRpc.NewImClient(m.cli.Conn())
	return client.CreateGroupConversation(ctx, in, opts...)
}

func (m *defaultIm) SendSysMsg(ctx context.Context, in *SendSysMsgReq, opts ...grpc.CallOption) (*ResultResp, error) {
	client := imRpc.NewImClient(m.cli.Conn())
	return client.SendSysMsg(ctx, in, opts...)
}
