// Code generated by goctl. DO NOT EDIT.
package logic

import (
	"context"
	"go-zero-dandan/app/im/rpc/internal/svc"
	"go-zero-dandan/app/im/rpc/types/imRpc"
	"go-zero-dandan/common/resd"
	"go-zero-dandan/common/typed"

	"github.com/zeromicro/go-zero/core/logx"
)

type SendSysMsgLogicGen struct {
	ctx  context.Context
	svc  *svc.ServiceContext
	resd *resd.Resp
	meta *typed.ReqMeta
	logx.Logger
	req struct {
		UserId     string
		MsgTypeEm  int64
		MsgContent string
		SendTime   int64
		MsgClasEm  int64
	}
	hasReq struct {
		UserId     bool
		MsgTypeEm  bool
		MsgContent bool
		SendTime   bool
		MsgClasEm  bool
	}
}

func NewSendSysMsgLogicGen(ctx context.Context, svc *svc.ServiceContext) *SendSysMsgLogicGen {
	meta, _ := ctx.Value("reqMeta").(*typed.ReqMeta)
	if meta == nil {
		meta = &typed.ReqMeta{}
	}
	return &SendSysMsgLogicGen{
		ctx:    ctx,
		svc:    svc,
		Logger: logx.WithContext(ctx),
		resd:   resd.NewResp(ctx, resd.I18n.NewLang(meta.Lang)),
		meta:   meta,
	}
}

func (l *SendSysMsgLogicGen) initReq(req *imRpc.SendSysMsgReq) error {

	if req.UserId != nil {
		l.req.UserId = *req.UserId
		l.hasReq.UserId = true
	} else {
		l.hasReq.UserId = false
	}

	if req.MsgTypeEm != nil {
		l.req.MsgTypeEm = *req.MsgTypeEm
		l.hasReq.MsgTypeEm = true
	} else {
		l.hasReq.MsgTypeEm = false
	}

	if req.MsgContent != nil {
		l.req.MsgContent = *req.MsgContent
		l.hasReq.MsgContent = true
	} else {
		l.hasReq.MsgContent = false
	}

	if req.SendTime != nil {
		l.req.SendTime = *req.SendTime
		l.hasReq.SendTime = true
	} else {
		l.hasReq.SendTime = false
	}

	if req.MsgClasEm != nil {
		l.req.MsgClasEm = *req.MsgClasEm
		l.hasReq.MsgClasEm = true
	} else {
		l.hasReq.MsgClasEm = false
	}

	return nil
}
