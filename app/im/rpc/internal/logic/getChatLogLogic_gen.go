// Code generated by goctl. DO NOT EDIT.
package logic

import (
	"context"
	"go-zero-dandan/app/im/rpc/internal/svc"
	"go-zero-dandan/app/im/rpc/types/imRpc"
	"go-zero-dandan/common/resd"
	"go-zero-dandan/common/typed"

	"github.com/zeromicro/go-zero/core/logx"
)

type GetChatLogLogicGen struct {
	ctx  context.Context
	svc  *svc.ServiceContext
	resd *resd.Resp
	meta *typed.ReqMeta
	logx.Logger
	req struct {
		ConversationId string
		StartSendTime  int64
		EndSendTime    int64
		Count          int64
		MsgId          string
	}
	hasReq struct {
		ConversationId bool
		StartSendTime  bool
		EndSendTime    bool
		Count          bool
		MsgId          bool
	}
}

func NewGetChatLogLogicGen(ctx context.Context, svc *svc.ServiceContext) *GetChatLogLogicGen {
	meta, _ := ctx.Value("reqMeta").(*typed.ReqMeta)
	if meta == nil {
		meta = &typed.ReqMeta{}
	}
	return &GetChatLogLogicGen{
		ctx:    ctx,
		svc:    svc,
		Logger: logx.WithContext(ctx),
		resd:   resd.NewResp(ctx, resd.I18n.NewLang(meta.Lang)),
		meta:   meta,
	}
}

func (l *GetChatLogLogicGen) initReq(req *imRpc.GetChatLogReq) error {

	if req.ConversationId != nil {
		l.req.ConversationId = *req.ConversationId
		l.hasReq.ConversationId = true
	} else {
		l.hasReq.ConversationId = false
	}

	if req.StartSendTime != nil {
		l.req.StartSendTime = *req.StartSendTime
		l.hasReq.StartSendTime = true
	} else {
		l.hasReq.StartSendTime = false
	}

	if req.EndSendTime != nil {
		l.req.EndSendTime = *req.EndSendTime
		l.hasReq.EndSendTime = true
	} else {
		l.hasReq.EndSendTime = false
	}

	if req.Count != nil {
		l.req.Count = *req.Count
		l.hasReq.Count = true
	} else {
		l.hasReq.Count = false
	}

	if req.MsgId != nil {
		l.req.MsgId = *req.MsgId
		l.hasReq.MsgId = true
	} else {
		l.hasReq.MsgId = false
	}

	return nil
}
