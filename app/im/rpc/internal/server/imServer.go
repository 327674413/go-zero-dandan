// Code generated by goctl. DO NOT EDIT.
// Source: im.proto

package server

import (
	"context"

	"go-zero-dandan/app/im/rpc/internal/logic"
	"go-zero-dandan/app/im/rpc/internal/svc"
	"go-zero-dandan/app/im/rpc/types/pb"
)

type ImServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedImServer
}

func NewImServer(svcCtx *svc.ServiceContext) *ImServer {
	return &ImServer{
		svcCtx: svcCtx,
	}
}

// 获取会话记录
func (s *ImServer) GetChatLog(ctx context.Context, in *pb.GetChatLogReq) (*pb.GetChatLogResp, error) {
	l := logic.NewGetChatLogLogic(ctx, s.svcCtx)
	return l.GetChatLog(in)
}

// 建立会话: 群聊, 私聊
func (s *ImServer) SetUpUserConversation(ctx context.Context, in *pb.SetUpUserConversationReq) (*pb.SetUpUserConversationResp, error) {
	l := logic.NewSetUpUserConversationLogic(ctx, s.svcCtx)
	return l.SetUpUserConversation(in)
}

// 获取会话
func (s *ImServer) GetConversations(ctx context.Context, in *pb.GetConversationsReq) (*pb.GetConversationsResp, error) {
	l := logic.NewGetConversationsLogic(ctx, s.svcCtx)
	return l.GetConversations(in)
}

// 更新会话
func (s *ImServer) PutConversations(ctx context.Context, in *pb.PutConversationsReq) (*pb.PutConversationsResp, error) {
	l := logic.NewPutConversationsLogic(ctx, s.svcCtx)
	return l.PutConversations(in)
}

func (s *ImServer) CreateGroupConversation(ctx context.Context, in *pb.CreateGroupConversationReq) (*pb.CreateGroupConversationResp, error) {
	l := logic.NewCreateGroupConversationLogic(ctx, s.svcCtx)
	return l.CreateGroupConversation(in)
}
