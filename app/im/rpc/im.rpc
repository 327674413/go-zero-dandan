//import "desc/friend.rpc"

type ChatLog {
   Id string
   ConversationId string
  SendId  string
  RecvId string
  MsgType  int64
  MsgContent string
  ChatType int64
  SendTime string
  SendAtMs int64
  MsgReads []byte
  MsgState int64
}
type Conversation {
  ConversationId string
  ChatType int64
  TargetId  string
  IsShow bool
  ReadSeq int64
  DeleteSeq int64 
  // 总消息数
  Total int64
  // 未读消息数
  Unread int64
  // 已读消息
  Read int64
  LastMsg ChatLog
  LastAtMs int64
}
type GetConversationsReq {
   UserId string
}
type GetConversationsResp {
  ConversationList map[string]Conversation
}

type SendSysMsgReq{
  UserId string
  MsgTypeEm  int64
  MsgContent string
  SendTime string 
  MsgClasEm int64
}


type PutConversationsReq {
  Id  string
  UserId string
  ConversationList map[string]Conversation
}
type PutConversationsResp {}
type GetChatLogReq {
  ConversationId string
  StartSendAt int64
  EndSendAt int64
  Count int64
  MsgId string
}
type GetChatLogResp {
  list []*ChatLog
}

type SetUpUserConversationReq{
  SendId string
  RecvId string
  ChatType int64
}
type SetUpUserConversationResp{}

type CreateGroupConversationReq {
  GroupId string
  CreateId string
}
type CreateGroupConversationResp {}

type ResultResp{
  Code int64
  Content string
}

type (
  getUserSysMsgUnreadNumReq{
    userId *string `json:"sendId,optional" check:"required"`
    msgClasEm *int64 `json:"msgClasEm,optional"`
  }
  getUserSysMsgUnreadNumResp{
    unread map[int64]int64 `json:"unread"`
  }
)
type (
  setUserSysMsgReadByClasReq{
    userId *string `json:"userId,optional" check:"required"`
    clasList []int64 `json:"clasList,optional" check:"required"`
  }
)
type (
  setUserSysMsgReadByIdReq{
    userId *string `json:"userId,optional" check:"required"`
    msgIdList []string `json:"msgIdList,optional" check:"required"`
  }
)
type (
  DeleteUserConversationReq{
    UserId string `json:"userId,optional" check:"required"`
    ConversationId string `json:"conversationId,optional" check:"required"`
  }
)
@server(
  middleware: MetaMiddleware
)
service Im {
  // 获取会话记录
  @handler GetChatLog
  post /GetChatLog(GetChatLogReq) returns (GetChatLogResp)
  // 建立会话: 群聊, 私聊
  @handler SetUpUserConversation
  post /SetUpUserConversation(SetUpUserConversationReq) returns (SetUpUserConversationResp)
  // 获取会话
  @handler GetConversations
  post /GetConversations(GetConversationsReq) returns (GetConversationsResp)
  // 更新会话
  @handler PutConversations
  post /PutConversations(PutConversationsReq) returns (PutConversationsResp)
  //创建群组会话
  @handler CreateGroupConversation
  post /CreateGroupConversation(CreateGroupConversationReq) returns (CreateGroupConversationResp)

  @doc "删除用户会话"
  @handler DeleteUserConversation
  post /DeleteUserConversation(DeleteUserConversationReq) returns (ResultResp)

  // 发送系统消息
  @handler SendSysMsg
  post /SendSysMsg(SendSysMsgReq) returns (ResultResp)

  @doc "获取系统消息未读数"
  @handler getUserSysMsgUnreadNum
  post /getUserSysMsgUnreadNum(getUserSysMsgUnreadNumReq) returns (getUserSysMsgUnreadNumResp)

  @doc "设置用户系统消息已读,根据消息类型"
  @handler setUserSysMsgReadByClas
  post /setUserSysMsgReadByClas(setUserSysMsgReadByClasReq) returns (ResultResp)

  @doc "设置用户系统消息已读,根据消息id"
  @handler setUserSysMsgReadById
  post /setUserSysMsgReadById(setUserSysMsgReadByIdReq) returns (ResultResp)
}