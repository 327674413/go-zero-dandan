// Code generated by goctl. DO NOT EDIT.
// Source: message.proto

package message

import (
	"context"

	"go-zero-dandan/app/message/rpc/types/messageRpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	SendImReq    = messageRpc.SendImReq
	SendPhoneReq = messageRpc.SendPhoneReq
	SuccResp     = messageRpc.SuccResp

	Message interface {
		SendPhone(ctx context.Context, in *SendPhoneReq, opts ...grpc.CallOption) (*SuccResp, error)
		SendPhoneAsync(ctx context.Context, in *SendPhoneReq, opts ...grpc.CallOption) (*SuccResp, error)
		SendIm(ctx context.Context, in *SendImReq, opts ...grpc.CallOption) (*SuccResp, error)
		SendImAsync(ctx context.Context, in *SendImReq, opts ...grpc.CallOption) (*SuccResp, error)
	}

	defaultMessage struct {
		cli zrpc.Client
	}
)

func NewMessage(cli zrpc.Client) Message {
	return &defaultMessage{
		cli: cli,
	}
}

func (m *defaultMessage) SendPhone(ctx context.Context, in *SendPhoneReq, opts ...grpc.CallOption) (*SuccResp, error) {
	client := messageRpc.NewMessageClient(m.cli.Conn())
	return client.SendPhone(ctx, in, opts...)
}

func (m *defaultMessage) SendPhoneAsync(ctx context.Context, in *SendPhoneReq, opts ...grpc.CallOption) (*SuccResp, error) {
	client := messageRpc.NewMessageClient(m.cli.Conn())
	return client.SendPhoneAsync(ctx, in, opts...)
}

func (m *defaultMessage) SendIm(ctx context.Context, in *SendImReq, opts ...grpc.CallOption) (*SuccResp, error) {
	client := messageRpc.NewMessageClient(m.cli.Conn())
	return client.SendIm(ctx, in, opts...)
}

func (m *defaultMessage) SendImAsync(ctx context.Context, in *SendImReq, opts ...grpc.CallOption) (*SuccResp, error) {
	client := messageRpc.NewMessageClient(m.cli.Conn())
	return client.SendImAsync(ctx, in, opts...)
}
