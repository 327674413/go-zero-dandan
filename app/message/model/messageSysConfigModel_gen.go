// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"go-zero-dandan/common/dao"
	"go-zero-dandan/common/redisd"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	messageSysConfigFieldNames          = builder.RawFieldNames(&MessageSysConfig{})
	messageSysConfigRows                = strings.Join(messageSysConfigFieldNames, ",")
	defaultMessageSysConfigFields       = strings.Join(messageSysConfigFieldNames, ",")
	messageSysConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(messageSysConfigFieldNames, "`delete_at`"), ",")
	messageSysConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(messageSysConfigFieldNames, "`id`", "`delete_at`"), "=?,") + "=?"
)

type (
	messageSysConfigModel interface {
		Insert(data map[string]string) (int64, error)
		TxInsert(tx *sql.Tx, data map[string]string) (int64, error)
		Update(data map[string]string) (int64, error)
		TxUpdate(tx *sql.Tx, data map[string]string) (int64, error)
		Save(data map[string]string) (int64, error)
		TxSave(tx *sql.Tx, data map[string]string) (int64, error)
		Delete(ctx context.Context, id int64) error
		Field(field string) *defaultMessageSysConfigModel
		Alias(alias string) *defaultMessageSysConfigModel
		Where(whereStr string, whereData ...any) *defaultMessageSysConfigModel
		WhereId(id int64) *defaultMessageSysConfigModel
		Order(order string) *defaultMessageSysConfigModel
		Limit(num int64) *defaultMessageSysConfigModel
		Plat(id int64) *defaultMessageSysConfigModel
		Find() (*MessageSysConfig, error)
		FindById(id int64) (*MessageSysConfig, error)
		CacheFind(redis *redisd.Redisd) (*MessageSysConfig, error)
		CacheFindById(redis *redisd.Redisd, id int64) (*MessageSysConfig, error)
		Page(page int64, rows int64) *defaultMessageSysConfigModel
		Select() ([]*MessageSysConfig, error)
		SelectWithTotal() ([]*MessageSysConfig, int64, error)
		CacheSelect(redis *redisd.Redisd) ([]*MessageSysConfig, error)
		Count() (int64, error)
		Inc(field string, num int) (int64, error)
		Dec(field string, num int) (int64, error)
		Ctx(ctx context.Context) *defaultMessageSysConfigModel
		Reinit() *defaultMessageSysConfigModel
		Dao() *dao.SqlxDao
	}

	defaultMessageSysConfigModel struct {
		conn            sqlx.SqlConn
		table           string
		dao             *dao.SqlxDao
		softDeleteField string
		softDeletable   bool
		fieldSql        string
		whereSql        string
		aliasSql        string
		orderSql        string
		platId          int64
		whereData       []any
		err             error
		ctx             context.Context
	}

	MessageSysConfig struct {
		Id              int64 `db:"id"`
		SmsLimitHourNum int64 `db:"sms_limit_hour_num"` // 最近一小时内获取上限,0则不管控
		SmsLimitDayNum  int64 `db:"sms_limit_day_num"`  // 每日获取上限,0则不管控
		CreateAt        int64 `db:"create_at"`          // 创建时间戳
		UpdateAt        int64 `db:"update_at"`          // 更新时间戳
		DeleteAt        int64 `db:"delete_at"`          // 删除时间戳
	}
)

func newMessageSysConfigModel(conn sqlx.SqlConn, platId int64) *defaultMessageSysConfigModel {
	dao := dao.NewSqlxDao(conn, "`message_sys_config`", defaultMessageSysConfigFields, true, "delete_at")
	dao.Plat(platId)
	return &defaultMessageSysConfigModel{
		conn:            conn,
		dao:             dao,
		table:           "`message_sys_config`",
		platId:          platId,
		softDeleteField: "delete_at",
		whereData:       make([]any, 0),
	}
}
func (m *defaultMessageSysConfigModel) Ctx(ctx context.Context) *defaultMessageSysConfigModel {
	m.dao.Ctx(ctx)
	return m
}
func (m *defaultMessageSysConfigModel) WhereId(id int64) *defaultMessageSysConfigModel {
	m.dao.WhereId(id)
	return m
}

func (m *defaultMessageSysConfigModel) Where(whereStr string, whereData ...any) *defaultMessageSysConfigModel {
	m.dao.Where(whereStr, whereData...)
	return m
}

func (m *defaultMessageSysConfigModel) Alias(alias string) *defaultMessageSysConfigModel {
	m.dao.Alias(alias)
	return m
}
func (m *defaultMessageSysConfigModel) Field(field string) *defaultMessageSysConfigModel {
	m.dao.Field(field)
	return m
}
func (m *defaultMessageSysConfigModel) Order(order string) *defaultMessageSysConfigModel {
	m.dao.Order(order)
	return m
}
func (m *defaultMessageSysConfigModel) Limit(num int64) *defaultMessageSysConfigModel {
	m.dao.Limit(num)
	return m
}
func (m *defaultMessageSysConfigModel) Count() (int64, error) {
	return m.dao.Count()
}
func (m *defaultMessageSysConfigModel) Inc(field string, num int) (int64, error) {
	return m.dao.Inc(field, num)
}
func (m *defaultMessageSysConfigModel) TxInc(tx *sql.Tx, field string, num int) (int64, error) {
	return m.dao.TxInc(tx, field, num)
}
func (m *defaultMessageSysConfigModel) Dec(field string, num int) (int64, error) {
	return m.dao.Dec(field, num)
}
func (m *defaultMessageSysConfigModel) TxDec(tx *sql.Tx, field string, num int) (int64, error) {
	return m.dao.Dec(field, num)
}
func (m *defaultMessageSysConfigModel) Plat(id int64) *defaultMessageSysConfigModel {
	m.dao.Plat(id)
	return m
}
func (m *defaultMessageSysConfigModel) Reinit() *defaultMessageSysConfigModel {
	m.dao.Reinit()
	return m
}
func (m *defaultMessageSysConfigModel) Dao() *dao.SqlxDao {
	return m.dao
}
func (m *defaultMessageSysConfigModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMessageSysConfigModel) Find() (*MessageSysConfig, error) {
	resp := &MessageSysConfig{}
	err := m.dao.Find(resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
func (m *defaultMessageSysConfigModel) FindById(id int64) (*MessageSysConfig, error) {
	resp := &MessageSysConfig{}
	err := m.dao.FindById(resp, id)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
func (m *defaultMessageSysConfigModel) CacheFind(redis *redisd.Redisd) (*MessageSysConfig, error) {
	resp := &MessageSysConfig{}
	err := m.dao.CacheFind(redis, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
func (m *defaultMessageSysConfigModel) CacheFindById(redis *redisd.Redisd, id int64) (*MessageSysConfig, error) {
	resp := &MessageSysConfig{}
	err := m.dao.CacheFindById(redis, resp, id)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultMessageSysConfigModel) Select() ([]*MessageSysConfig, error) {
	resp := make([]*MessageSysConfig, 0)
	err := m.dao.Select(&resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
func (m *defaultMessageSysConfigModel) SelectWithTotal() ([]*MessageSysConfig, int64, error) {
	resp := make([]*MessageSysConfig, 0)
	var total int64
	err := m.dao.Select(&resp, &total)
	if err != nil {
		return nil, 0, err
	}
	return resp, total, nil
}
func (m *defaultMessageSysConfigModel) CacheSelect(redis *redisd.Redisd) ([]*MessageSysConfig, error) {
	resp := make([]*MessageSysConfig, 0)
	err := m.dao.CacheSelect(redis, &resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultMessageSysConfigModel) Page(page int64, rows int64) *defaultMessageSysConfigModel {
	m.dao.Page(page, rows)
	return m
}

func (m *defaultMessageSysConfigModel) Insert(data map[string]string) (int64, error) {
	return m.dao.Insert(data)
}
func (m *defaultMessageSysConfigModel) TxInsert(tx *sql.Tx, data map[string]string) (int64, error) {
	return m.dao.TxInsert(tx, data)
}

func (m *defaultMessageSysConfigModel) Update(data map[string]string) (int64, error) {
	return m.dao.Update(data)
}
func (m *defaultMessageSysConfigModel) TxUpdate(tx *sql.Tx, data map[string]string) (int64, error) {
	return m.dao.TxUpdate(tx, data)
}
func (m *defaultMessageSysConfigModel) Save(data map[string]string) (int64, error) {
	return m.dao.Save(data)
}
func (m *defaultMessageSysConfigModel) TxSave(tx *sql.Tx, data map[string]string) (int64, error) {
	return m.dao.Save(data)
}

func (m *defaultMessageSysConfigModel) tableName() string {
	return m.table
}
