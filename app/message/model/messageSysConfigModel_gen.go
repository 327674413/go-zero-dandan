// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"go-zero-dandan/common/redisd"
	"strconv"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	messageSysConfigFieldNames          = builder.RawFieldNames(&MessageSysConfig{})
	messageSysConfigRows                = strings.Join(messageSysConfigFieldNames, ",")
	messageSysConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(messageSysConfigFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	messageSysConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(messageSysConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	messageSysConfigModel interface {
		Insert(ctx context.Context, data *MessageSysConfig) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MessageSysConfig, error)
		Update(ctx context.Context, data *MessageSysConfig) error
		Delete(ctx context.Context, id int64) error
		Field(field string) *defaultMessageSysConfigModel
		Alias(alias string) *defaultMessageSysConfigModel
		WhereStr(whereStr string) *defaultMessageSysConfigModel
		WhereId(id int) *defaultMessageSysConfigModel
		WhereMap(whereMap map[string]any) *defaultMessageSysConfigModel
		WhereRaw(whereStr string, whereData []any) *defaultMessageSysConfigModel
		Order(order string) *defaultMessageSysConfigModel
		Plat(id int) *defaultMessageSysConfigModel
		Find(ctx context.Context, id ...any) (*MessageSysConfig, error)
		CacheFind(ctx context.Context, redis *redisd.Redisd, id ...int64) (*MessageSysConfig, error)
		Page(ctx context.Context, page int, rows int) ([]*MessageSysConfig, error)
		List(ctx context.Context) ([]*MessageSysConfig, error)
		Count(ctx context.Context) int
		Inc(ctx context.Context, field string, num int) error
		Dec(ctx context.Context, field string, num int) error
	}

	defaultMessageSysConfigModel struct {
		conn            sqlx.SqlConn
		table           string
		softDeleteField string
		SoftDeletable   bool
		fieldSql        string
		whereSql        string
		aliasSql        string
		orderSql        string
		whereData       []any
		err             error
	}

	MessageSysConfig struct {
		Id              int64 `db:"id"`
		SmsLimitHourNum int64 `db:"sms_limit_hour_num"` // 每小时获取上限,0则不管控
		SmsLimitDayNum  int64 `db:"sms_limit_day_num"`  // 每日获取上限,0则不管控
		CreateAt        int64 `db:"create_at"`          // 创建时间戳
		UpdateAt        int64 `db:"update_at"`          // 更新时间戳
		DeleteAt        int64 `db:"delete_at"`          // 删除时间戳
	}
)

func newMessageSysConfigModel(conn sqlx.SqlConn) *defaultMessageSysConfigModel {
	return &defaultMessageSysConfigModel{
		conn:            conn,
		table:           "`message_sys_config`",
		softDeleteField: "delete_at",
		whereData:       make([]any, 0),
	}
}

func (m *defaultMessageSysConfigModel) WhereId(id int) *defaultMessageSysConfigModel {
	m.whereSql = "id=?"
	m.whereData = append(m.whereData, id)
	return m
}
func (m *defaultMessageSysConfigModel) Page(ctx context.Context, page int, rows int) ([]*MessageSysConfig, error) {

	return nil, nil
}
func (m *defaultMessageSysConfigModel) List(ctx context.Context) ([]*MessageSysConfig, error) {

	return nil, nil
}
func (m *defaultMessageSysConfigModel) WhereStr(whereStr string) *defaultMessageSysConfigModel {
	return m
}

func (m *defaultMessageSysConfigModel) WhereMap(whereMap map[string]any) *defaultMessageSysConfigModel {
	return m
}
func (m *defaultMessageSysConfigModel) WhereRaw(whereStr string, whereData []any) *defaultMessageSysConfigModel {
	if m.whereSql != "" {
		m.whereSql += " AND (" + whereStr + ")"
	} else {
		m.whereSql = "(" + whereStr + ")"
	}
	m.whereData = append(m.whereData, whereData...)
	return m
}
func (m *defaultMessageSysConfigModel) Alias(field string) *defaultMessageSysConfigModel {
	m.aliasSql = field
	return m
}
func (m *defaultMessageSysConfigModel) Field(field string) *defaultMessageSysConfigModel {
	m.fieldSql = field
	return m
}
func (m *defaultMessageSysConfigModel) Order(order string) *defaultMessageSysConfigModel {

	return m
}
func (m *defaultMessageSysConfigModel) Count(ctx context.Context) int {

	return 0
}
func (m *defaultMessageSysConfigModel) Inc(ctx context.Context, field string, num int) error {

	return nil
}
func (m *defaultMessageSysConfigModel) Dec(ctx context.Context, field string, num int) error {

	return nil
}
func (m *defaultMessageSysConfigModel) Plat(id int) *defaultMessageSysConfigModel {

	return nil
}
func (m *defaultMessageSysConfigModel) CacheFind(ctx context.Context, redis *redisd.Redisd, id ...int64) (*MessageSysConfig, error) {
	resp := &MessageSysConfig{}
	cacheField := "model_" + m.tableName()
	cacheKey := strconv.FormatInt(id[0], 10)
	// todo::需要把where条件一起放进去作为key，这样就能支持更多的自动缓存查询
	err := redis.GetData(cacheField, cacheKey, resp)
	if err == nil {
		return resp, nil
	}
	resp, err = m.Find(ctx, id[0])
	fmt.Println(resp, err)
	if err != nil {
		return resp, err
	}
	if resp.Id != 0 {
		redis.SetData(cacheField, cacheKey, resp)
	}
	return resp, nil
}

func (m *defaultMessageSysConfigModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMessageSysConfigModel) Find(ctx context.Context, id ...any) (*MessageSysConfig, error) {
	var err error
	if err = m.err; err != nil {
		m.err = nil
		return nil, err
	}
	var resp MessageSysConfig
	var sql string
	field := messageSysConfigRows
	if m.fieldSql != "" {
		field = m.fieldSql
	}
	if len(id) > 0 {
		sql = fmt.Sprintf("select %s from %s where id=? limit 1", field, m.table)
		err = m.conn.QueryRowPartialCtx(ctx, &resp, sql, id[0]) //QueryRowCtx 必须字段都覆盖
	} else {
		sql = fmt.Sprintf("select %s from %s %s where "+m.whereSql+" limit 1", field, m.table, m.aliasSql)
		err = m.conn.QueryRowPartialCtx(ctx, &resp, sql, m.whereData...)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return &resp, nil
	default:
		return nil, err
	}
}
func (m *defaultMessageSysConfigModel) FindOne(ctx context.Context, id int64) (*MessageSysConfig, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", messageSysConfigRows, m.table)
	var resp MessageSysConfig
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMessageSysConfigModel) Insert(ctx context.Context, data *MessageSysConfig) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, messageSysConfigRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.SmsLimitHourNum, data.SmsLimitDayNum, data.DeleteAt)
	return ret, err
}

func (m *defaultMessageSysConfigModel) Update(ctx context.Context, data *MessageSysConfig) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, messageSysConfigRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SmsLimitHourNum, data.SmsLimitDayNum, data.DeleteAt, data.Id)
	return err
}

func (m *defaultMessageSysConfigModel) tableName() string {
	return m.table
}
