// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	messageSmsTempFieldNames          = builder.RawFieldNames(&MessageSmsTemp{})
	messageSmsTempRows                = strings.Join(messageSmsTempFieldNames, ",")
	messageSmsTempRowsExpectAutoSet   = strings.Join(stringx.Remove(messageSmsTempFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	messageSmsTempRowsWithPlaceHolder = strings.Join(stringx.Remove(messageSmsTempFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	messageSmsTempModel interface {
		Insert(ctx context.Context, data *MessageSmsTemp) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MessageSmsTemp, error)
		Update(ctx context.Context, data *MessageSmsTemp) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMessageSmsTempModel struct {
		conn            sqlx.SqlConn
		table           string
		softDeleteField string
		softDeleteState bool
		fieldSql        string
		whereSql        string
		aliasSql        string
		orderSql        string
		whereData       []any
		err             error
	}

	MessageSmsTemp struct {
		Id          int64  `db:"id"`
		Name        string `db:"name"`
		SecretId    string `db:"secret_id"`     // SecretId
		SecretKey   string `db:"secret_key"`    // SecretKey
		Region      string `db:"region"`        // region
		SmsSdkAppid string `db:"sms_sdk_appid"` // SmsSdkAppId
		SignName    string `db:"sign_name"`     // SignName
		TemplateId  string `db:"template_id"`   // TemplateId
		PlatId      int64  `db:"plat_id"`       // 应用id
		CreateAt    int64  `db:"create_at"`     // 创建时间戳
		UpdateAt    int64  `db:"update_at"`     // 更新时间戳
		DeleteAt    int64  `db:"delete_at"`     // 删除时间戳
	}
)

func newMessageSmsTempModel(conn sqlx.SqlConn) *defaultMessageSmsTempModel {
	return &defaultMessageSmsTempModel{
		conn:            conn,
		table:           "`message_sms_temp`",
		softDeleteField: "delete_at",
		softDeleteState: true,
		whereData:       make([]any, 0),
	}
}

func (m *defaultMessageSmsTempModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMessageSmsTempModel) FindOne(ctx context.Context, id int64) (*MessageSmsTemp, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", messageSmsTempRows, m.table)
	var resp MessageSmsTemp
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMessageSmsTempModel) Insert(ctx context.Context, data *MessageSmsTemp) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, messageSmsTempRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.SecretId, data.SecretKey, data.Region, data.SmsSdkAppid, data.SignName, data.TemplateId, data.PlatId, data.DeleteAt)
	return ret, err
}

func (m *defaultMessageSmsTempModel) Update(ctx context.Context, data *MessageSmsTemp) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, messageSmsTempRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.SecretId, data.SecretKey, data.Region, data.SmsSdkAppid, data.SignName, data.TemplateId, data.PlatId, data.DeleteAt, data.Id)
	return err
}

func (m *defaultMessageSmsTempModel) tableName() string {
	return m.table
}
