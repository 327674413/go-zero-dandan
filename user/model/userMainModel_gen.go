// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userMainFieldNames          = builder.RawFieldNames(&UserMain{})
	userMainRows                = strings.Join(userMainFieldNames, ",")
	userMainRowsExpectAutoSet   = strings.Join(stringx.Remove(userMainFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userMainRowsWithPlaceHolder = strings.Join(stringx.Remove(userMainFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userMainModel interface {
		Insert(ctx context.Context, data *UserMain) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserMain, error)
		Update(ctx context.Context, data *UserMain) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserMainModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserMain struct {
		Id          int64  `db:"id"`
		UserUnionId int64  `db:"user_union_id"` // 平台层用户唯一表示
		StateEm     int64  `db:"state_em"`      // 用户状态枚举
		Account     string `db:"account"`       // 登录账号
		Password    string `db:"password"`      // 登录密码
		Uid         string `db:"uid"`           // 用户编号
		Nickname    string `db:"nickname"`      // 昵称
		Phone       string `db:"phone"`         // 手机号
		PhoneArea   string `db:"phone_area"`    // 手机区号
		Email       string `db:"email"`         // 邮箱地址
		Avatar      string `db:"avatar"`        // 头像
		SexEm       int64  `db:"sex_em"`        // 性别枚举
		AppId       int64  `db:"app_id"`        // 应用id
		CreateAt    int64  `db:"create_at"`     // 创建时间戳
		UpdateAt    int64  `db:"update_at"`     // 更新时间戳
		DeleteAt    int64  `db:"delete_at"`     // 删除时间戳
	}
)

func newUserMainModel(conn sqlx.SqlConn) *defaultUserMainModel {
	return &defaultUserMainModel{
		conn:  conn,
		table: "`user_main`",
	}
}

func (m *defaultUserMainModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserMainModel) FindOne(ctx context.Context, id int64) (*UserMain, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userMainRows, m.table)
	var resp UserMain
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserMainModel) Insert(ctx context.Context, data *UserMain) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userMainRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserUnionId, data.StateEm, data.Account, data.Password, data.Uid, data.Nickname, data.Phone, data.PhoneArea, data.Email, data.Avatar, data.SexEm, data.AppId, data.DeleteAt)
	return ret, err
}

func (m *defaultUserMainModel) Update(ctx context.Context, data *UserMain) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userMainRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserUnionId, data.StateEm, data.Account, data.Password, data.Uid, data.Nickname, data.Phone, data.PhoneArea, data.Email, data.Avatar, data.SexEm, data.AppId, data.DeleteAt, data.Id)
	return err
}

func (m *defaultUserMainModel) tableName() string {
	return m.table
}
